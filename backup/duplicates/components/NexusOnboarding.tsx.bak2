// Nexus Onboarding - Completely Unique Profile Setup
// Features: Holographic progress, Voice guidance, Dynamic completion, Save & resume

'use client';

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '@/hooks/useAuth';
import { PersonalInfoStep } from './steps/PersonalInfoStep';
import { ProfessionalDetailsStep } from './steps/ProfessionalDetailsStep';
import { JobPreferencesStep } from './steps/JobPreferencesStep';
import { PortfolioStep } from './steps/PortfolioStep';

interface OnboardingData {
  personal: {
    firstName: string;
    lastName: string;
    phone: string;
    location: string;
    bio: string;
  };
  professional: {
    title: string;
    experience: number;
    skills: string[];
    education: {
      degree: string;
      institution: string;
      year: number;
    }[];
  };
  preferences: {
    jobTypes: string[];
    salaryRange: { min: number; max: number };
    remoteWork: boolean;
    travelWillingness: boolean;
  };
  portfolio: {
    resume: File | null;
    profilePicture: File | null;
    socialLinks: {
      linkedin: string;
      github: string;
      portfolio: string;
    };
  };
}

interface NexusOnboardingProps {
  onComplete?: (data: OnboardingData) => void;
  initialData?: Partial<OnboardingData>;
}

export default function NexusOnboarding({ onComplete, initialData }: NexusOnboardingProps) {
  // Auth
  const { user } = useAuth();

  // State
  const [currentStep, setCurrentStep] = useState(0);
  const [data, setData] = useState<OnboardingData>({
    personal: { firstName: '', lastName: '', phone: '', location: '', bio: '' },
    professional: { title: '', experience: 0, skills: [], education: [] },
    preferences: { jobTypes: [], salaryRange: { min: 0, max: 0 }, remoteWork: false, travelWillingness: false },
    portfolio: { resume: null, profilePicture: null, socialLinks: { linkedin: '', github: '', portfolio: '' } },
    ...initialData
  });
  
  const [isVoiceGuided, setIsVoiceGuided] = useState(false);
  const [voiceInstructions, setVoiceInstructions] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);
  
  // Refs
  const voiceRecognitionRef = useRef<any>(null);
  const autoSaveTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Constants
  const steps = [
    { id: 'personal', title: 'Personal Information', icon: '👤', progress: 25 },
    { id: 'professional', title: 'Professional Details', icon: '💼', progress: 50 },
    { id: 'preferences', title: 'Job Preferences', icon: '🎯', progress: 75 },
    { id: 'portfolio', title: 'Portfolio & Resume', icon: '📁', progress: 100 }
  ];

  // Save progress
  const saveProgress = useCallback(async () => {
    if (!user) return;
    
    setIsSaving(true);
    try {
      const completionPercentage = calculateCompletion();
      // Save to localStorage as backup
      localStorage.setItem('nexus_onboarding_data', JSON.stringify(data));
      
    } catch (error) {
      console.error('Failed to save progress:', error);
    } finally {
      setIsSaving(false);
    }
  }, [user, data, calculateCompletion]);

  // Navigation handlers
  const handleNext = useCallback(() => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  }, [currentStep, steps.length]);

  const handlePrevious = useCallback(() => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  }, [currentStep]);

  const handleComplete = useCallback(async () => {
    setIsSaving(true);
    try {
      await saveProgress();
      if (onComplete) {
        onComplete(data);
      }
    } finally {
      setIsSaving(false);
    }
  }, [saveProgress, onComplete, data]);

  // Update data
  const updateData = useCallback((section: keyof OnboardingData, updates: Partial<OnboardingData[keyof OnboardingData]>) => {
    setData(prev => ({
      ...prev,
      [section]: { ...prev[section], ...updates }
    }));
  }, []);

  // Save progress
  const saveProgress = useCallback(async () => {
    if (!user) return;
    
    setIsSaving(true);
    try {
      const completionPercentage = calculateCompletion();
      // Save to localStorage as backup
      localStorage.setItem('nexus_onboarding_data', JSON.stringify(data));
      
    } catch (error) {
      console.error('Failed to save progress:', error);
    } finally {
      setIsSaving(false);
    }
  }, [user, data, calculateCompletion]);

  // Calculate completion percentage
  const calculateCompletion = useCallback((): number => {
    let completed = 0;
    let total = 0;
    
    // Personal info
    Object.values(data.personal).forEach(value => {
      total++;
      if (value && value.toString().trim()) completed++;
    });
    
    // Professional info
    if (data.professional.title) completed++;
    if (data.professional.experience > 0) completed++;
    if (data.professional.skills.length > 0) completed++;
    total += 3;
    
    // Preferences
    if (data.preferences.jobTypes.length > 0) completed++;
    if (data.preferences.salaryRange.min > 0) completed++;
    total += 2;
    
    // Portfolio
    if (data.portfolio.resume) completed++;
    if (data.portfolio.profilePicture) completed++;
    total += 2;
    
    return Math.round((completed / total) * 100);
  }, [data]);

  // Voice guidance system
  useEffect(() => {
    if (isVoiceGuided && 'webkitSpeechRecognition' in window) {
      const recognition = new (window as any).webkitSpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'en-US';
      
      recognition.onresult = (event: any) => {
        const transcript = Array.from(event.results)
          .map((result: any) => result[0].transcript)
          .join('');
        
        handleVoiceCommand(transcript);
      };
      
      voiceRecognitionRef.current = recognition;
      recognition.start();
      
      return () => {
        recognition.stop();
      };
    }
  }, [isVoiceGuided]);

  // Auto-save functionality
  useEffect(() => {
    if (autoSaveEnabled && data) {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
      
      autoSaveTimeoutRef.current = setTimeout(() => {
        saveProgress();
      }, 3000);
    }
    
    return () => {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
    };
  }, [data, autoSaveEnabled, saveProgress]);

  // Voice command handler
  const handleVoiceCommand = useCallback((transcript: string) => {
    const command = transcript.toLowerCase();
    
    if (command.includes('next') || command.includes('continue')) {
      handleNext();
    } else if (command.includes('previous') || command.includes('back')) {
      handlePrevious();
    } else if (command.includes('save')) {
      saveProgress();
    } else if (command.includes('complete')) {
      handleComplete();
    }
    
    // Update voice instructions
    setVoiceInstructions(`Heard: "${transcript}"`);
    setTimeout(() => setVoiceInstructions(''), 2000);
  }, [handleNext, handlePrevious, saveProgress, handleComplete]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900">
      {/* Voice Guidance Toggle */}
      <div className="absolute top-4 right-4 z-50">
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => setIsVoiceGuided(!isVoiceGuided)}
          className={`p-3 rounded-full ${
            isVoiceGuided 
              ? 'bg-green-500 text-white' 
              : 'bg-white/10 text-purple-300'
          } transition-all`}
        >
          🎤
        </motion.button>
      </div>

      {/* Voice Instructions */}
      <AnimatePresence>
        {voiceInstructions && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="absolute top-16 right-4 bg-green-500/20 border border-green-500/30 rounded-lg p-3 text-green-300 text-sm"
          >
            {voiceInstructions}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Holographic Progress Bar */}
      <div className="fixed top-0 left-0 right-0 z-40">
        <div className="h-2 bg-white/10">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${calculateCompletion()}%` }}
            className="h-full bg-gradient-to-r from-purple-500 to-cyan-500"
          />
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <motion.h1
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-4xl font-bold text-white mb-4"
          >
            Complete Your Profile
          </motion.h1>
          <p className="text-purple-300">
            Step {currentStep + 1} of {steps.length} • {calculateCompletion()}% Complete
          </p>
        </div>

        {/* Step Navigation */}
        <div className="flex justify-center mb-8">
          <div className="flex space-x-4">
            {steps.map((step, index) => (
              <motion.button
                key={step.id}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setCurrentStep(index)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all ${
                  index === currentStep
                    ? 'bg-purple-600 text-white'
                    : 'bg-white/10 text-purple-300 hover:bg-white/20'
                }`}
              >
                <span>{step.icon}</span>
                <span className="hidden md:inline">{step.title}</span>
              </motion.button>
            ))}
          </div>
        </div>

        {/* Content Area */}
        <div className="max-w-2xl mx-auto">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              className="bg-white/10 backdrop-blur border border-white/20 rounded-xl p-8"
            >
              {/* Personal Information Step */}
              {currentStep === 0 && (
                <PersonalInfoStep
                  data={data.personal}
                  onUpdate={(updates) => updateData('personal', updates)}
                />
              )}

              {/* Professional Details Step */}
              {currentStep === 1 && (
                <ProfessionalDetailsStep
                  data={data.professional}
                  onUpdate={(updates) => updateData('professional', updates)}
                />
              )}

              {/* Job Preferences Step */}
              {currentStep === 2 && (
                <JobPreferencesStep
                  data={data.preferences}
                  onUpdate={(updates) => updateData('preferences', updates)}
                />
              )}

              {/* Portfolio Step */}
              {currentStep === 3 && (
                <PortfolioStep
                  data={data.portfolio}
                  onUpdate={(updates) => updateData('portfolio', updates)}
                />
              )}
            </motion.div>
          </AnimatePresence>
        </div>

        {/* Navigation Buttons */}
        <div className="flex justify-between items-center mt-8 max-w-2xl mx-auto">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handlePrevious}
            disabled={currentStep === 0}
            className="px-6 py-3 bg-white/10 border border-white/20 rounded-lg text-white hover:bg-white/20 transition-all disabled:opacity-50"
          >
            ← Previous
          </motion.button>

          <div className="flex items-center space-x-4">
            {/* Auto-save toggle */}
            <label className="flex items-center space-x-2 text-purple-300">
              <input
                type="checkbox"
                checked={autoSaveEnabled}
                onChange={(e) => setAutoSaveEnabled(e.target.checked)}
                className="rounded"
              />
              <span className="text-sm">Auto-save</span>
            </label>

            {/* Save button */}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={saveProgress}
              disabled={isSaving}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all disabled:opacity-50"
            >
              {isSaving ? '💾 Saving...' : '💾 Save'}
            </motion.button>
          </div>

          {currentStep === steps.length - 1 ? (
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleComplete}
              disabled={isSaving}
              className="px-6 py-3 bg-gradient-to-r from-purple-600 to-cyan-600 text-white rounded-lg hover:from-purple-700 hover:to-cyan-700 transition-all disabled:opacity-50"
            >
              {isSaving ? 'Completing...' : 'Complete Setup'}
            </motion.button>
          ) : (
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleNext}
              className="px-6 py-3 bg-gradient-to-r from-purple-600 to-cyan-600 text-white rounded-lg hover:from-purple-700 hover:to-cyan-700 transition-all"
            >
              Next →
            </motion.button>
          )}
        </div>
      </div>
    </div>
  );
}
