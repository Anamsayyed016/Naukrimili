// Nexus Onboarding - Completely Unique Profile Setup
// Features: Holographic progress, Voice guidance, Dynamic completion, Save & resume

'use client';

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '@/hooks/useAuth';

interface OnboardingData {
  personal: {
    firstName: string;
    lastName: string;
    phone: string;
    location: string;
    bio: string;
  };
  professional: {
    title: string;
    experience: number;
    skills: string[];
    education: {
      degree: string;
      institution: string;
      year: number;
    }[];
  };
  preferences: {
    jobTypes: string[];
    salaryRange: { min: number; max: number };
    remoteWork: boolean;
    travelWillingness: boolean;
  };
  portfolio: {
    resume: File | null;
    profilePicture: File | null;
    socialLinks: {
      linkedin: string;
      github: string;
      portfolio: string;
    };
  };
}

interface NexusOnboardingProps {
  onComplete?: (data: OnboardingData) => void;
  initialData?: Partial<OnboardingData>;
}

export default function NexusOnboarding({ onComplete, initialData }: NexusOnboardingProps) {
  // Auth
  const { user } = useAuth();

  // State
  const [currentStep, setCurrentStep] = useState(0);
  const [data, setData] = useState<OnboardingData>({
    personal: { firstName: '', lastName: '', phone: '', location: '', bio: '' },
    professional: { title: '', experience: 0, skills: [], education: [] },
    preferences: { jobTypes: [], salaryRange: { min: 0, max: 0 }, remoteWork: false, travelWillingness: false },
    portfolio: { resume: null, profilePicture: null, socialLinks: { linkedin: '', github: '', portfolio: '' } },
    ...initialData
  });
  
  const [isVoiceGuided, setIsVoiceGuided] = useState(false);
  const [voiceInstructions, setVoiceInstructions] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);
  
  // Refs
  const voiceRecognitionRef = useRef<any>(null);
  const autoSaveTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Constants
  const steps = [
    { id: 'personal', title: 'Personal Information', icon: '👤', progress: 25 },
    { id: 'professional', title: 'Professional Details', icon: '💼', progress: 50 },
    { id: 'preferences', title: 'Job Preferences', icon: '🎯', progress: 75 },
    { id: 'portfolio', title: 'Portfolio & Resume', icon: '📁', progress: 100 }
  ];

  // Navigation handlers
  const handleNext = useCallback(() => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  }, [currentStep, steps.length]);

  const handlePrevious = useCallback(() => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  }, [currentStep]);

  // Calculate completion percentage
  const calculateCompletion = useCallback((): number => {
    let completed = 0;
    let total = 0;
    
    // Personal info
    Object.values(data.personal).forEach(value => {
      total++;
      if (value && value.toString().trim()) completed++;
    });
    
    // Professional info
    if (data.professional.title) completed++;
    if (data.professional.experience > 0) completed++;
    if (data.professional.skills.length > 0) completed++;
    total += 3;
    
    // Preferences
    if (data.preferences.jobTypes.length > 0) completed++;
    if (data.preferences.salaryRange.min > 0) completed++;
    total += 2;
    
    // Portfolio
    if (data.portfolio.resume) completed++;
    if (data.portfolio.profilePicture) completed++;
    total += 2;
    
    return Math.round((completed / total) * 100);
  }, [data]);

  // Save progress
  const saveProgress = useCallback(async () => {
    if (!user) return;
    
    setIsSaving(true);
    try {
      const completionPercentage = calculateCompletion();
      // TODO: Implement updateProfile function
      localStorage.setItem('nexus_onboarding_data', JSON.stringify(data));
    } catch (error) {
      console.error('Failed to save progress:', error);
    } finally {
      setIsSaving(false);
    }
  }, [user, data, calculateCompletion]);

  // Navigation handlers
  const handleNext = useCallback(() => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  }, [currentStep, steps.length]);

  const handlePrevious = useCallback(() => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  }, [currentStep]);

  const handleComplete = useCallback(async () => {
    setIsSaving(true);
    try {
      await saveProgress();
      if (onComplete) {
        onComplete(data);
      }
    } finally {
      setIsSaving(false);
    }
  }, [saveProgress, onComplete, data]);

  // Update data
  const updateData = useCallback((section: keyof OnboardingData, updates: any) => {
    setData(prev => ({
      ...prev,
      [section]: { ...prev[section], ...updates }
    }));
  }, []);

  // Update data
  const updateData = useCallback((section: keyof OnboardingData, updates: any) => {
    setData(prev => ({
      ...prev,
      [section]: { ...prev[section], ...updates }
    }));
  }, []);

  // Calculate completion percentage
  const calculateCompletion = useCallback((): number => {
    let completed = 0;
    let total = 0;
    
    // Personal info
    Object.values(data.personal).forEach(value => {
      total++;
      if (value && value.toString().trim()) completed++;
    });
    
    // Professional info
    if (data.professional.title) completed++;
    if (data.professional.experience > 0) completed++;
    if (data.professional.skills.length > 0) completed++;
    total += 3;
    
    // Preferences
    if (data.preferences.jobTypes.length > 0) completed++;
    if (data.preferences.salaryRange.min > 0) completed++;
    total += 2;
    
    // Portfolio
    if (data.portfolio.resume) completed++;
    if (data.portfolio.profilePicture) completed++;
    total += 2;
    
    return Math.round((completed / total) * 100);
  }, [data]);

  // Save progress
  const saveProgress = useCallback(async () => {
    if (!user) return;
    
    setIsSaving(true);
    try {
      const completionPercentage = calculateCompletion();
      // TODO: Implement updateProfile function
      // await updateProfile(user.id, {
      //   profileCompletion: completionPercentage,
      //   // Store onboarding data in user profile
      //   profile: {
      //     ...data.personal,
      //     skills: data.professional.skills,
      //     experience: { years: data.professional.experience },
      //     education: data.professional.education,
      //     preferences: data.preferences
      //   }
      // });
      
      // Save to localStorage as backup
      localStorage.setItem('nexus_onboarding_data', JSON.stringify(data));
      
    } catch (error) {
      console.error('Failed to save progress:', error);
    } finally {
      setIsSaving(false);
    }
  }, [user, data, calculateCompletion]);

  const steps = [
    { id: 'personal', title: 'Personal Information', icon: '👤', progress: 25 },
    { id: 'professional', title: 'Professional Details', icon: '💼', progress: 50 },
    { id: 'preferences', title: 'Job Preferences', icon: '🎯', progress: 75 },
    { id: 'portfolio', title: 'Portfolio & Resume', icon: '📁', progress: 100 }
  ];

  const steps = [
    { id: 'personal', title: 'Personal Information', icon: '👤', progress: 25 },
    { id: 'professional', title: 'Professional Details', icon: '💼', progress: 50 },
    { id: 'preferences', title: 'Job Preferences', icon: '🎯', progress: 75 },
    { id: 'portfolio', title: 'Portfolio & Resume', icon: '📁', progress: 100 }
  ];

  // Navigation handlers
  const handleNext = useCallback(() => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  }, [currentStep, steps.length]);

  const handlePrevious = useCallback(() => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  }, [currentStep]);

  // Calculate completion percentage
  const calculateCompletion = useCallback((): number => {
    let completed = 0;
    let total = 0;
    
    // Personal info
    Object.values(data.personal).forEach(value => {
      total++;
      if (value && value.toString().trim()) completed++;
    });
    
    // Professional info
    if (data.professional.title) completed++;
    if (data.professional.experience > 0) completed++;
    if (data.professional.skills.length > 0) completed++;
    total += 3;
    
    // Preferences
    if (data.preferences.jobTypes.length > 0) completed++;
    if (data.preferences.salaryRange.min > 0) completed++;
    total += 2;
    
    // Portfolio
    if (data.portfolio.resume) completed++;
    if (data.portfolio.profilePicture) completed++;
    total += 2;
    
    return Math.round((completed / total) * 100);
  }, [data]);

  // Save progress
  const saveProgress = useCallback(async () => {
    if (!user) return;
    
    setIsSaving(true);
    try {
      const completionPercentage = calculateCompletion();
      // TODO: Implement updateProfile function
      // await updateProfile(user.id, {
      //   profileCompletion: completionPercentage,
      //   // Store onboarding data in user profile
      //   profile: {
      //     ...data.personal,
      //     skills: data.professional.skills,
      //     experience: { years: data.professional.experience },
      //     education: data.professional.education,
      //     preferences: data.preferences
      //   }
      // });
      
      // Save to localStorage as backup
      localStorage.setItem('nexus_onboarding_data', JSON.stringify(data));
      
    } catch (error) {
      console.error('Failed to save progress:', error);
    } finally {
      setIsSaving(false);
    }
  }, [user, data, calculateCompletion]);

  const handleComplete = useCallback(async () => {
    setIsSaving(true);
    try {
      await saveProgress();
      if (onComplete) {
        onComplete(data);
      }
    } finally {
      setIsSaving(false);
    }
  }, [saveProgress, onComplete, data]);

  // Update data
  const updateData = useCallback((section: keyof OnboardingData, updates: any) => {
    setData(prev => ({
      ...prev,
      [section]: { ...prev[section], ...updates }
    }));
  }, []);

  // Voice guidance system
  useEffect(() => {
    if (isVoiceGuided && 'webkitSpeechRecognition' in window) {
      const recognition = new (window as any).webkitSpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'en-US';
      
      recognition.onresult = (event: any) => {
        const transcript = Array.from(event.results)
          .map((result: any) => result[0].transcript)
          .join('');
        
        handleVoiceCommand(transcript);
      };
      
      voiceRecognitionRef.current = recognition;
      recognition.start();
      
      return () => {
        recognition.stop();
      };
    }
  }, [isVoiceGuided]);

  // Auto-save functionality
  useEffect(() => {
    if (autoSaveEnabled && data) {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
      
      autoSaveTimeoutRef.current = setTimeout(() => {
        saveProgress();
      }, 3000);
    }
    
    return () => {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
    };
  }, [data, autoSaveEnabled, saveProgress]);

  // Voice command handler
  const handleVoiceCommand = useCallback((transcript: string) => {
    const command = transcript.toLowerCase();
    
    if (command.includes('next') || command.includes('continue')) {
      handleNext();
    } else if (command.includes('previous') || command.includes('back')) {
      handlePrevious();
    } else if (command.includes('save')) {
      saveProgress();
    } else if (command.includes('complete')) {
      handleComplete();
    }
    
    // Update voice instructions
    setVoiceInstructions(`Heard: "${transcript}"`);
    setTimeout(() => setVoiceInstructions(''), 2000);
  }, [handleNext, handlePrevious, saveProgress, handleComplete]);
  };





  // Navigation handlers
  const handleNext = useCallback(() => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  }, [currentStep, steps.length]);

  const handlePrevious = useCallback(() => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  }, [currentStep]);

  const handleComplete = useCallback(async () => {
    setIsSaving(true);
    try {
      await saveProgress();
      if (onComplete) {
        onComplete(data);
      }
    } finally {
      setIsSaving(false);
    }
  }, [saveProgress, onComplete, data]);

  // Update data
  const updateData = (section: keyof OnboardingData, updates: any) => {
    setData(prev => ({
      ...prev,
      [section]: { ...prev[section], ...updates }
    }));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900">
      {/* Voice Guidance Toggle */}
      <div className="absolute top-4 right-4 z-50">
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => setIsVoiceGuided(!isVoiceGuided)}
          className={`p-3 rounded-full ${
            isVoiceGuided 
              ? 'bg-green-500 text-white' 
              : 'bg-white/10 text-purple-300'
          } transition-all`}
        >
          🎤
        </motion.button>
      </div>

      {/* Voice Instructions */}
      <AnimatePresence>
        {voiceInstructions && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="absolute top-16 right-4 bg-green-500/20 border border-green-500/30 rounded-lg p-3 text-green-300 text-sm"
          >
            {voiceInstructions}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Holographic Progress Bar */}
      <div className="fixed top-0 left-0 right-0 z-40">
        <div className="h-2 bg-white/10">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${calculateCompletion()}%` }}
            className="h-full bg-gradient-to-r from-purple-500 to-cyan-500"
          />
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <motion.h1
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-4xl font-bold text-white mb-4"
          >
            Complete Your Profile
          </motion.h1>
          <p className="text-purple-300">
            Step {currentStep + 1} of {steps.length} • {calculateCompletion()}% Complete
          </p>
        </div>

        {/* Step Navigation */}
        <div className="flex justify-center mb-8">
          <div className="flex space-x-4">
            {steps.map((step, index) => (
              <motion.button
                key={step.id}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setCurrentStep(index)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all ${
                  index === currentStep
                    ? 'bg-purple-600 text-white'
                    : 'bg-white/10 text-purple-300 hover:bg-white/20'
                }`}
              >
                <span>{step.icon}</span>
                <span className="hidden md:inline">{step.title}</span>
              </motion.button>
            ))}
          </div>
        </div>

        {/* Content Area */}
        <div className="max-w-2xl mx-auto">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              className="bg-white/10 backdrop-blur border border-white/20 rounded-xl p-8"
            >
              {/* Personal Information Step */}
              {currentStep === 0 && (
                <PersonalInfoStep
                  data={data.personal}
                  onUpdate={(updates) => updateData('personal', updates)}
                />
              )}

              {/* Professional Details Step */}
              {currentStep === 1 && (
                <ProfessionalDetailsStep
                  data={data.professional}
                  onUpdate={(updates) => updateData('professional', updates)}
                />
              )}

              {/* Job Preferences Step */}
              {currentStep === 2 && (
                <JobPreferencesStep
                  data={data.preferences}
                  onUpdate={(updates) => updateData('preferences', updates)}
                />
              )}

              {/* Portfolio Step */}
              {currentStep === 3 && (
                <PortfolioStep
                  data={data.portfolio}
                  onUpdate={(updates) => updateData('portfolio', updates)}
                />
              )}
            </motion.div>
          </AnimatePresence>
        </div>

        {/* Navigation Buttons */}
        <div className="flex justify-between items-center mt-8 max-w-2xl mx-auto">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handlePrevious}
            disabled={currentStep === 0}
            className="px-6 py-3 bg-white/10 border border-white/20 rounded-lg text-white hover:bg-white/20 transition-all disabled:opacity-50"
          >
            ← Previous
          </motion.button>

          <div className="flex items-center space-x-4">
            {/* Auto-save toggle */}
            <label className="flex items-center space-x-2 text-purple-300">
              <input
                type="checkbox"
                checked={autoSaveEnabled}
                onChange={(e) => setAutoSaveEnabled(e.target.checked)}
                className="rounded"
              />
              <span className="text-sm">Auto-save</span>
            </label>

            {/* Save button */}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={saveProgress}
              disabled={isSaving}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all disabled:opacity-50"
            >
              {isSaving ? '💾 Saving...' : '💾 Save'}
            </motion.button>
          </div>

          {currentStep === steps.length - 1 ? (
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleComplete}
              disabled={isSaving}
              className="px-6 py-3 bg-gradient-to-r from-purple-600 to-cyan-600 text-white rounded-lg hover:from-purple-700 hover:to-cyan-700 transition-all disabled:opacity-50"
            >
              {isSaving ? 'Completing...' : 'Complete Setup'}
            </motion.button>
          ) : (
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleNext}
              className="px-6 py-3 bg-gradient-to-r from-purple-600 to-cyan-600 text-white rounded-lg hover:from-purple-700 hover:to-cyan-700 transition-all"
            >
              Next →
            </motion.button>
          )}
        </div>
      </div>
    </div>
  );
}

// Step Components
function PersonalInfoStep({ data, onUpdate }: { data: any; onUpdate: (updates: any) => void }) {
  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white mb-6">👤 Personal Information</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-white text-sm font-medium mb-2">First Name</label>
          <input
            type="text"
            value={data.firstName}
            onChange={(e) => onUpdate({ firstName: e.target.value })}
            className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
            placeholder="Enter your first name"
          />
        </div>
        
        <div>
          <label className="block text-white text-sm font-medium mb-2">Last Name</label>
          <input
            type="text"
            value={data.lastName}
            onChange={(e) => onUpdate({ lastName: e.target.value })}
            className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
            placeholder="Enter your last name"
          />
        </div>
      </div>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Phone Number</label>
        <input
          type="tel"
          value={data.phone}
          onChange={(e) => onUpdate({ phone: e.target.value })}
          className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
          placeholder="Enter your phone number"
        />
      </div>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Location</label>
        <input
          type="text"
          value={data.location}
          onChange={(e) => onUpdate({ location: e.target.value })}
          className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
          placeholder="City, State, Country"
        />
      </div>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Bio</label>
        <textarea
          value={data.bio}
          onChange={(e) => onUpdate({ bio: e.target.value })}
          rows={4}
          className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
          placeholder="Tell us about yourself..."
        />
      </div>
    </div>
  );
}

function ProfessionalDetailsStep({ data, onUpdate }: { data: any; onUpdate: (updates: any) => void }) {
  const [skillInput, setSkillInput] = useState('');

  const addSkill = () => {
    if (skillInput.trim() && !data.skills.includes(skillInput.trim())) {
      onUpdate({ skills: [...data.skills, skillInput.trim()] });
      setSkillInput('');
    }
  };

  const removeSkill = (skill: string) => {
    onUpdate({ skills: data.skills.filter((s: string) => s !== skill) });
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white mb-6">💼 Professional Details</h2>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Job Title</label>
        <input
          type="text"
          value={data.title}
          onChange={(e) => onUpdate({ title: e.target.value })}
          className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
          placeholder="e.g., Senior Software Engineer"
        />
      </div>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Years of Experience</label>
        <input
          type="number"
          value={data.experience}
          onChange={(e) => onUpdate({ experience: parseInt(e.target.value) || 0 })}
          className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
          placeholder="0"
          min="0"
        />
      </div>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Skills</label>
        <div className="flex space-x-2 mb-2">
          <input
            type="text"
            value={skillInput}
            onChange={(e) => setSkillInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && addSkill()}
            className="flex-1 p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
            placeholder="Add a skill..."
          />
          <button
            onClick={addSkill}
            className="px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
          >
            Add
          </button>
        </div>
        <div className="flex flex-wrap gap-2">
          {data.skills.map((skill: string) => (
            <span
              key={skill}
              className="px-3 py-1 bg-purple-600 text-white rounded-full text-sm flex items-center space-x-1"
            >
              <span>{skill}</span>
              <button onClick={() => removeSkill(skill)} className="hover:text-red-300">×</button>
            </span>
          ))}
        </div>
      </div>
    </div>
  );
}

function JobPreferencesStep({ data, onUpdate }: { data: any; onUpdate: (updates: any) => void }) {
  const jobTypes = ['Full-time', 'Part-time', 'Contract', 'Internship', 'Remote'];

  const toggleJobType = (type: string) => {
    const current = data.jobTypes;
    const updated = current.includes(type)
      ? current.filter((t: string) => t !== type)
      : [...current, type];
    onUpdate({ jobTypes: updated });
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white mb-6">🎯 Job Preferences</h2>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Preferred Job Types</label>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
          {jobTypes.map((type) => (
            <label key={type} className="flex items-center space-x-2 p-3 bg-white/10 border border-white/20 rounded-lg cursor-pointer hover:bg-white/20 transition-colors">
              <input
                type="checkbox"
                checked={data.jobTypes.includes(type)}
                onChange={() => toggleJobType(type)}
                className="rounded"
              />
              <span className="text-white">{type}</span>
            </label>
          ))}
        </div>
      </div>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Salary Range (USD)</label>
        <div className="grid grid-cols-2 gap-4">
          <input
            type="number"
            value={data.salaryRange.min}
            onChange={(e) => onUpdate({ salaryRange: { ...data.salaryRange, min: parseInt(e.target.value) || 0 } })}
            className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
            placeholder="Minimum"
          />
          <input
            type="number"
            value={data.salaryRange.max}
            onChange={(e) => onUpdate({ salaryRange: { ...data.salaryRange, max: parseInt(e.target.value) || 0 } })}
            className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
            placeholder="Maximum"
          />
        </div>
      </div>
      
      <div className="space-y-4">
        <label className="flex items-center space-x-2 cursor-pointer">
          <input
            type="checkbox"
            checked={data.remoteWork}
            onChange={(e) => onUpdate({ remoteWork: e.target.checked })}
            className="rounded"
          />
          <span className="text-white">Open to remote work</span>
        </label>
        
        <label className="flex items-center space-x-2 cursor-pointer">
          <input
            type="checkbox"
            checked={data.travelWillingness}
            onChange={(e) => onUpdate({ travelWillingness: e.target.checked })}
            className="rounded"
          />
          <span className="text-white">Willing to travel</span>
        </label>
      </div>
    </div>
  );
}

function PortfolioStep({ data, onUpdate }: { data: any; onUpdate: (updates: any) => void }) {
  const handleFileUpload = (field: 'resume' | 'profilePicture', file: File) => {
    onUpdate({ [field]: file });
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white mb-6">📁 Portfolio & Resume</h2>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Resume</label>
        <div className="border-2 border-dashed border-white/20 rounded-lg p-6 text-center">
          <input
            type="file"
            accept=".pdf,.doc,.docx"
            onChange={(e) => e.target.files?.[0] && handleFileUpload('resume', e.target.files[0])}
            className="hidden"
            id="resume-upload"
          />
          <label htmlFor="resume-upload" className="cursor-pointer">
            <div className="text-4xl mb-2">📄</div>
            <p className="text-purple-300">
              {data.resume ? data.resume.name : 'Click to upload your resume'}
            </p>
          </label>
        </div>
      </div>
      
      <div>
        <label className="block text-white text-sm font-medium mb-2">Profile Picture</label>
        <div className="border-2 border-dashed border-white/20 rounded-lg p-6 text-center">
          <input
            type="file"
            accept="image/*"
            onChange={(e) => e.target.files?.[0] && handleFileUpload('profilePicture', e.target.files[0])}
            className="hidden"
            id="picture-upload"
          />
          <label htmlFor="picture-upload" className="cursor-pointer">
            <div className="text-4xl mb-2">📷</div>
            <p className="text-purple-300">
              {data.profilePicture ? data.profilePicture.name : 'Click to upload your photo'}
            </p>
          </label>
        </div>
      </div>
      
      <div className="space-y-4">
        <div>
          <label className="block text-white text-sm font-medium mb-2">LinkedIn</label>
          <input
            type="url"
            value={data.socialLinks.linkedin}
            onChange={(e) => onUpdate({ socialLinks: { ...data.socialLinks, linkedin: e.target.value } })}
            className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
            placeholder="https://linkedin.com/in/yourprofile"
          />
        </div>
        
        <div>
          <label className="block text-white text-sm font-medium mb-2">GitHub</label>
          <input
            type="url"
            value={data.socialLinks.github}
            onChange={(e) => onUpdate({ socialLinks: { ...data.socialLinks, github: e.target.value } })}
            className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
            placeholder="https://github.com/yourusername"
          />
        </div>
        
        <div>
          <label className="block text-white text-sm font-medium mb-2">Portfolio Website</label>
          <input
            type="url"
            value={data.socialLinks.portfolio}
            onChange={(e) => onUpdate({ socialLinks: { ...data.socialLinks, portfolio: e.target.value } })}
            className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-500"
            placeholder="https://yourportfolio.com"
          />
        </div>
      </div>
    </div>
  );
} 