name: Deploy to Hostinger VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies..."
        
        # Clean up
        rm -rf node_modules package-lock.json .next .npm .tsbuildinfo
        npm cache clean --force
        
        # Create .npmrc for better compatibility
        cat > .npmrc << 'EOF'
        engine-strict=false
        legacy-peer-deps=true
        fund=false
        audit=false
        auto-install-peers=true
        EOF
        
        # Install dependencies
        npm install --legacy-peer-deps --engine-strict=false --force
        
        # Install TailwindCSS and UI dependencies
        npm install --legacy-peer-deps --engine-strict=false \
          tailwindcss@3.4.18 \
          postcss@8.4.47 \
          autoprefixer@10.4.20 \
          @radix-ui/react-slot@1.2.3 \
          @radix-ui/react-dialog@1.1.15 \
          @radix-ui/react-dropdown-menu@2.1.16 \
          @radix-ui/react-toast@1.2.15 \
          @radix-ui/react-label@2.1.1 \
          @radix-ui/react-checkbox@1.1.2 \
          @radix-ui/react-progress@1.1.1 \
          @radix-ui/react-select@2.2.5 \
          class-variance-authority@0.7.1 \
          clsx@2.1.1 \
          tailwind-merge@2.6.0 \
          lucide-react@0.525.0 \
          @heroicons/react@2.2.0
        
        # Install as dev dependencies
        npm install --save-dev --legacy-peer-deps --engine-strict=false \
          tailwindcss@3.4.18 \
          postcss@8.4.47 \
          autoprefixer@10.4.20
        
        # Generate Prisma client
        npx prisma generate
        
      env:
        NODE_ENV: production
        
    - name: Build application
      run: |
        echo "üî® Building application..."
        
        # Set build environment
        export NODE_ENV=production
        export NODE_OPTIONS="--max-old-space-size=4096"
        export NEXT_PUBLIC_SKIP_GOOGLE_FONTS=true
        export NEXT_TELEMETRY_DISABLED=1
        export NEXT_PUBLIC_BUILD_TIME=$(date +%s)000
        
        # Build the application
        npx next build
        
        # Verify build
        if [ ! -d ".next" ]; then
          echo "‚ùå Build failed - .next directory not found"
          exit 1
        fi
        
        echo "‚úÖ Build completed successfully"
        
      env:
        NODE_ENV: production
        NODE_OPTIONS: "--max-old-space-size=4096"
        NEXT_PUBLIC_SKIP_GOOGLE_FONTS: "true"
        NEXT_TELEMETRY_DISABLED: "1"
        
    - name: Deploy to Hostinger VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        timeout: 15m
        command_timeout: 10m
        script: |
          echo "üöÄ Starting deployment to Hostinger VPS..."
          
          # Navigate to project directory
          cd /root/jobportal
          
          # Stop PM2 process
          echo "‚èπÔ∏è Stopping PM2 process..."
          pm2 stop jobportal || true
          pm2 delete jobportal || true
          
          # Handle git conflicts by resetting to clean state
          echo "üîÑ Resetting git state..."
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          
          # Pull latest changes
          echo "üì• Pulling latest changes..."
          git pull origin main
          
          # Install dependencies
          echo "üì¶ Installing dependencies..."
          rm -f package-lock.json
          echo "engine-strict=false" > .npmrc
          echo "legacy-peer-deps=true" >> .npmrc
          echo "fund=false" >> .npmrc
          echo "audit=false" >> .npmrc
          npm install --legacy-peer-deps --engine-strict=false --force
          
          # Install UI dependencies
          npm install --legacy-peer-deps --engine-strict=false \
            tailwindcss postcss autoprefixer @radix-ui/react-slot @radix-ui/react-dialog @radix-ui/react-dropdown-menu @radix-ui/react-toast @radix-ui/react-label @radix-ui/react-checkbox @radix-ui/react-progress @radix-ui/react-select class-variance-authority clsx tailwind-merge lucide-react @heroicons/react
          
          npx prisma generate
          
          # Build with increased memory
          echo "üî® Building application..."
          export NODE_OPTIONS="--max-old-space-size=4096"
          export NEXT_TELEMETRY_DISABLED=1
          npm run build:fast
          
          # Start PM2 process with production environment
          echo "‚ñ∂Ô∏è Starting application..."
          pm2 start ecosystem.config.cjs --env production --no-daemon
          
          # Wait a moment for startup
          sleep 5
          
          # Check if process started successfully
          if ! pm2 list | grep -q "online"; then
            echo "‚ö†Ô∏è Process not online, trying to restart..."
            pm2 restart jobportal
            sleep 5
          fi
          
          # Check status
          echo "üìä Checking application status..."
          pm2 status
          
          # Test application with retries
          echo "üß™ Testing application..."
          sleep 15
          
          # Try health check multiple times
          for i in {1..3}; do
            echo "Health check attempt $i/3..."
            if curl -f http://localhost:3000/api/health; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚ùå Health check failed, waiting 10 seconds..."
              sleep 10
            fi
          done
          
          # Show PM2 logs for debugging
          echo "üìã PM2 logs:"
          pm2 logs jobportal --lines 20
          
          echo "‚úÖ Deployment completed successfully!"