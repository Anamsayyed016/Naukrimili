name: Deploy to Hostinger VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          .next/cache
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        
        # Clean up only if not cached
        if [ ! -d "node_modules" ]; then
        rm -rf node_modules package-lock.json .next .npm .tsbuildinfo
        npm cache clean --force
        fi
        
        # Create .npmrc for better compatibility
        cat > .npmrc << 'EOF'
        engine-strict=false
        legacy-peer-deps=true
        fund=false
        audit=false
        auto-install-peers=true
        EOF
        
        # Install all dependencies in one command
        npm ci --legacy-peer-deps --engine-strict=false --force || npm install --legacy-peer-deps --engine-strict=false --force
        
        # Generate Prisma client
        npx prisma generate
        
      env:
        NODE_ENV: production
        
    - name: Build application
      run: |
        echo "🔨 Building application..."
        
        # Build the application with optimized settings
        NODE_ENV=production \
        NODE_OPTIONS="--max-old-space-size=4096" \
        NEXT_PUBLIC_SKIP_GOOGLE_FONTS=true \
        NEXT_TELEMETRY_DISABLED=1 \
        NEXT_PUBLIC_BUILD_TIME=$(date +%s)000 \
        npx next build
        
        # Verify build
        if [ ! -d ".next" ]; then
          echo "❌ Build failed - .next directory not found"
          exit 1
        fi
        
        echo "✅ Build completed successfully"
        
      env:
        NODE_ENV: production
        NODE_OPTIONS: "--max-old-space-size=4096"
        NEXT_PUBLIC_SKIP_GOOGLE_FONTS: "true"
        NEXT_TELEMETRY_DISABLED: "1"
        
    - name: Verify build artifacts
      run: |
        echo "🔍 Verifying build artifacts..."
        
        # Check if build directory exists
        if [ ! -d ".next" ]; then
          echo "❌ Build directory not found"
          exit 1
        fi
        
        # Check if static files exist
        if [ ! -d ".next/static" ]; then
          echo "❌ Static files not found"
          exit 1
        fi
        
        # Check build size
        BUILD_SIZE=$(du -sh .next | cut -f1)
        echo "📊 Build size: $BUILD_SIZE"
        
        echo "✅ Build artifacts verified successfully"
        
    - name: Deploy to Hostinger VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        timeout: 20m
        command_timeout: 15m
        debug: true
        script: |
          echo "🚀 Starting deployment to Hostinger VPS..."
          
          # Navigate to project directory
          cd /root/jobportal
          
          # Stop PM2 process
          echo "⏹️ Stopping PM2 process..."
          pm2 stop jobportal || true
          pm2 delete jobportal || true
          
          # Handle git conflicts by resetting to clean state
          echo "🔄 Resetting git state..."
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git pull origin main
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          rm -f package-lock.json
          echo "engine-strict=false" > .npmrc
          echo "legacy-peer-deps=true" >> .npmrc
          echo "fund=false" >> .npmrc
          echo "audit=false" >> .npmrc
          echo "auto-install-peers=true" >> .npmrc
          
          # Install all dependencies in one command
          npm install --legacy-peer-deps --engine-strict=false --force
          
          # Generate Prisma client
          npx prisma generate
          
          # Build with increased memory
          echo "🔨 Building application..."
          export NODE_OPTIONS="--max-old-space-size=4096"
          export NEXT_TELEMETRY_DISABLED=1
          npm run build:fast
          
          # Start PM2 process with production environment
          echo "▶️ Starting application..."
          pm2 start ecosystem.config.cjs --env production --no-daemon || {
            echo "❌ Failed to start PM2 process"
            pm2 logs jobportal --lines 10
            exit 1
          }
          
          # Wait for startup
          sleep 10
          
          # Check if process started successfully
          if ! pm2 list | grep -q "online"; then
            echo "⚠️ Process not online, trying to restart..."
            pm2 restart jobportal || {
              echo "❌ Failed to restart PM2 process"
              pm2 logs jobportal --lines 20
              exit 1
            }
            sleep 10
          fi
          
          # Check status
          echo "📊 Checking application status..."
          pm2 status
          
          # Test application with retries
          echo "🧪 Testing application..."
          sleep 15
          
          # Try health check multiple times
          for i in {1..3}; do
            echo "Health check attempt $i/3..."
            if curl -f http://localhost:3000/api/health; then
              echo "✅ Health check passed!"
              break
            else
              echo "❌ Health check failed, waiting 10 seconds..."
              sleep 10
            fi
          done
          
          # Show PM2 logs for debugging
          echo "📋 PM2 logs:"
          pm2 logs jobportal --lines 20
          
          # Final status check
          echo "🔍 Final status check..."
          pm2 status
          
          # Clean up old builds if needed
          echo "🧹 Cleaning up old builds..."
          find /root/jobportal -name "*.log" -mtime +7 -delete 2>/dev/null || true
          
          echo "✅ Deployment completed successfully!"