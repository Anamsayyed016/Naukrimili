name: 🚀 Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        echo "📦 Installing dependencies with Node $(node --version)..."
        
        # Clean up everything
        rm -rf node_modules .next .npm .tsbuildinfo package-lock.json
        npm cache clean --force
        
        # Create .npmrc for compatibility
        cat > .npmrc << 'EOF'
        engine-strict=false
        legacy-peer-deps=true
        fund=false
        audit=false
        auto-install-peers=true
        EOF
        
        # Install all dependencies
        echo "📦 Installing all dependencies..."
        npm install --legacy-peer-deps --engine-strict=false --force
        
        # Force install TailwindCSS and PostCSS as regular dependencies
        echo "🎨 Force installing TailwindCSS and PostCSS..."
        npm install --save --legacy-peer-deps --engine-strict=false \
          tailwindcss@3.4.18 \
          postcss@8.4.47 \
          autoprefixer@10.4.20
        
        # Verify TailwindCSS is installed
        echo "🔍 Verifying TailwindCSS installation..."
        if ! node -e "require('tailwindcss')" > /dev/null 2>&1; then
          echo "❌ TailwindCSS not found after installation, trying alternative method..."
          npm uninstall tailwindcss 2>/dev/null || true
          npm install --save --legacy-peer-deps --engine-strict=false tailwindcss@3.4.18
        fi
        
        # Final verification
        if node -e "require('tailwindcss')" > /dev/null 2>&1; then
          echo "✅ TailwindCSS is properly installed"
        else
          echo "❌ TailwindCSS installation failed"
          echo "📋 Available packages:"
          npm list | grep -i tailwind || echo "No TailwindCSS packages found"
          exit 1
        fi
        
        # Install UI dependencies
        npm install --legacy-peer-deps --engine-strict=false \
          @radix-ui/react-slot@1.2.3 \
          @radix-ui/react-dialog@1.1.15 \
          @radix-ui/react-dropdown-menu@2.1.16 \
          @radix-ui/react-toast@1.2.15 \
          @radix-ui/react-label@2.1.1 \
          @radix-ui/react-checkbox@1.1.2 \
          @radix-ui/react-progress@1.1.1 \
          @radix-ui/react-select@2.2.5 \
          class-variance-authority@0.7.1 \
          clsx@2.1.1 \
          tailwind-merge@2.6.0 \
          lucide-react@0.525.0 \
          @heroicons/react@2.2.0
        
        # Generate Prisma client
        npx prisma generate
        
        # Create TailwindCSS config if it doesn't exist
        echo "🎨 Ensuring TailwindCSS configuration..."
        if [ ! -f "tailwind.config.js" ]; then
          npx tailwindcss init -p
        fi
        
        echo "✅ Dependencies ready"
        
      env:
        NODE_ENV: production
        
    - name: 🔨 Build application
      run: |
        echo "🔨 Building application with Node $(node --version)..."
        
        # Build with error handling
        set +e
        NODE_ENV=production \
        NODE_OPTIONS="--max-old-space-size=4096" \
        NEXT_PUBLIC_SKIP_GOOGLE_FONTS=true \
        NEXT_TELEMETRY_DISABLED=1 \
        npx next build
        BUILD_EXIT_CODE=$?
        set -e
        
        # Check build result
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "⚠️ Build completed with warnings (exit code: $BUILD_EXIT_CODE)"
        fi
        
        # Verify build output
        if [ ! -d ".next" ]; then
          echo "❌ Build failed - .next directory not found"
          echo "📋 Directory contents:"
          ls -la
          exit 1
        fi
        
        echo "✅ Build completed successfully"
        
      env:
        NODE_ENV: production
        NODE_OPTIONS: "--max-old-space-size=4096"
        NEXT_PUBLIC_SKIP_GOOGLE_FONTS: "true"
        NEXT_TELEMETRY_DISABLED: "1"
        
    - name: 🚀 Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        timeout: 30m
        command_timeout: 25m
        debug: true
        script: |
          set -e
          echo "🚀 Starting production deployment..."
          
          # Navigate to project directory
          cd /var/www/jobportal
          echo "📁 Working in: $(pwd)"
          
          # Check Node version and install if needed
          NODE_VERSION=$(node --version 2>/dev/null || echo "not-installed")
          echo "🔍 Current Node version: $NODE_VERSION"
          
          if [[ ! "$NODE_VERSION" =~ ^v20\. ]]; then
            echo "📦 Installing Node.js 20.x..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            echo "✅ Node.js installed: $(node --version)"
          fi
          
          # Stop existing processes
          echo "⏹️ Stopping existing processes..."
          pm2 stop jobportal 2>/dev/null || true
          pm2 delete jobportal 2>/dev/null || true
          pm2 kill 2>/dev/null || true
          
          # Force clean git pull
          echo "🔄 Force cleaning git state..."
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          git pull origin main
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          rm -f package-lock.json
          cat > .npmrc << 'EOF'
          engine-strict=false
          legacy-peer-deps=true
          fund=false
          audit=false
          auto-install-peers=true
          EOF
          
          # Clean install
          rm -rf node_modules .next
          npm cache clean --force
          npm install --legacy-peer-deps --engine-strict=false --force
          
          # Force install TailwindCSS and PostCSS as regular dependencies
          echo "🎨 Force installing TailwindCSS and PostCSS..."
          npm install --save --legacy-peer-deps --engine-strict=false \
            tailwindcss@3.4.18 \
            postcss@8.4.47 \
            autoprefixer@10.4.20
          
          # Verify TailwindCSS is installed
          echo "🔍 Verifying TailwindCSS installation..."
          if ! node -e "require('tailwindcss')" > /dev/null 2>&1; then
            echo "❌ TailwindCSS not found after installation, trying alternative method..."
            npm uninstall tailwindcss 2>/dev/null || true
            npm install --save --legacy-peer-deps --engine-strict=false tailwindcss@3.4.18
          fi
          
          # Final verification
          if node -e "require('tailwindcss')" > /dev/null 2>&1; then
            echo "✅ TailwindCSS is properly installed"
          else
            echo "❌ TailwindCSS installation failed"
            echo "📋 Available packages:"
            npm list | grep -i tailwind || echo "No TailwindCSS packages found"
            exit 1
          fi
          
          # Install UI dependencies
          npm install --legacy-peer-deps --engine-strict=false \
            @radix-ui/react-slot@1.2.3 \
            @radix-ui/react-dialog@1.1.15 \
            @radix-ui/react-dropdown-menu@2.1.16 \
            @radix-ui/react-toast@1.2.15 \
            @radix-ui/react-label@2.1.1 \
            @radix-ui/react-checkbox@1.1.2 \
            @radix-ui/react-progress@1.1.1 \
            @radix-ui/react-select@2.2.5 \
            class-variance-authority@0.7.1 \
            clsx@2.1.1 \
            tailwind-merge@2.6.0 \
            lucide-react@0.525.0 \
            @heroicons/react@2.2.0
          
          # Generate Prisma client
          npx prisma generate
          
          # Create TailwindCSS config if it doesn't exist
          echo "🎨 Ensuring TailwindCSS configuration..."
          if [ ! -f "tailwind.config.js" ]; then
            npx tailwindcss init -p
          fi
          
          # Build application
          echo "🔨 Building application..."
          export NODE_OPTIONS="--max-old-space-size=4096"
          export NEXT_TELEMETRY_DISABLED=1
          export NODE_ENV=production
          
          # Build with error handling
          set +e
          npm run build
          BUILD_EXIT_CODE=$?
          set -e
          
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Build completed with warnings (exit code: $BUILD_EXIT_CODE)"
          fi
          
          # Verify build
          if [ ! -d ".next" ]; then
            echo "❌ Build failed - .next directory not found"
            echo "📋 Directory contents:"
            ls -la
            exit 1
          fi
          echo "✅ Build completed on server"
          
          # Create log directory
          mkdir -p /var/log/jobportal
          chmod 755 /var/log/jobportal
          
          # Start PM2 process
          echo "▶️ Starting application with PM2..."
          pm2 start ecosystem.config.cjs --env production --no-daemon
          
          # Wait for startup
          echo "⏳ Waiting for application to start..."
          sleep 20
          
          # Check PM2 status
          echo "📊 PM2 Status:"
          pm2 status
          
          # Health check with retries
          echo "🏥 Performing health check..."
          HEALTH_CHECK_PASSED=false
          for i in {1..10}; do
            echo "Health check attempt $i/10..."
            if curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "❌ Health check failed (attempt $i/10), waiting 15 seconds..."
              sleep 15
            fi
          done
          
          # Show logs for debugging
          echo "📋 PM2 logs:"
          pm2 logs jobportal --lines 30
          
          # Final status check
          echo "🔍 Final status check..."
          pm2 status
          
          # Check if health check passed
          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "❌ Health check failed after 10 attempts"
            echo "📋 Final PM2 logs:"
            pm2 logs jobportal --lines 50
            exit 1
          fi
          
          echo "✅ Production deployment completed successfully!"