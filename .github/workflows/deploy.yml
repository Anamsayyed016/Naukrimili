name: Deploy to Hostinger VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        
        # Clean up
        rm -rf node_modules package-lock.json .next .npm .tsbuildinfo
        npm cache clean --force
        
        # Create .npmrc for better compatibility
        cat > .npmrc << 'EOF'
        engine-strict=false
        legacy-peer-deps=true
        fund=false
        audit=false
        auto-install-peers=true
        EOF
        
        # Install dependencies
        npm install --legacy-peer-deps --engine-strict=false --force
        
        # Install TailwindCSS and UI dependencies
        npm install --legacy-peer-deps --engine-strict=false \
          tailwindcss@3.4.18 \
          postcss@8.4.47 \
          autoprefixer@10.4.20 \
          @radix-ui/react-slot@1.2.3 \
          @radix-ui/react-dialog@1.1.15 \
          @radix-ui/react-dropdown-menu@2.1.16 \
          @radix-ui/react-toast@1.2.15 \
          @radix-ui/react-label@2.1.1 \
          @radix-ui/react-checkbox@1.1.2 \
          @radix-ui/react-progress@1.1.1 \
          @radix-ui/react-select@2.2.5 \
          class-variance-authority@0.7.1 \
          clsx@2.1.1 \
          tailwind-merge@2.6.0 \
          lucide-react@0.525.0 \
          @heroicons/react@2.2.0
        
        # Install as dev dependencies
        npm install --save-dev --legacy-peer-deps --engine-strict=false \
          tailwindcss@3.4.18 \
          postcss@8.4.47 \
          autoprefixer@10.4.20
        
        # Generate Prisma client
        npx prisma generate
        
      env:
        NODE_ENV: production
        
    - name: Create UI components
      run: |
        echo "🎨 Creating UI components..."
        
        # Create missing directories
        mkdir -p components/ui lib
        
        # Create lib/utils.ts
        cat > lib/utils.ts << 'EOF'
        import { type ClassValue, clsx } from "clsx"
        import { twMerge } from "tailwind-merge"
        
        export function cn(...inputs: ClassValue[]) {
          return twMerge(clsx(inputs))
        }
        EOF
        
        # Create components/ui/card.tsx
        cat > components/ui/card.tsx << 'EOF'
        import * as React from "react"
        import { cn } from "@/lib/utils"
        
        const Card = React.forwardRef<
          HTMLDivElement,
          React.HTMLAttributes<HTMLDivElement>
        >(({ className, ...props }, ref) => (
          <div
            ref={ref}
            className={cn(
              "rounded-lg border bg-card text-card-foreground shadow-sm",
              className
            )}
            {...props}
          />
        ))
        Card.displayName = "Card"
        
        const CardHeader = React.forwardRef<
          HTMLDivElement,
          React.HTMLAttributes<HTMLDivElement>
        >(({ className, ...props }, ref) => (
          <div
            ref={ref}
            className={cn("flex flex-col space-y-1.5 p-6", className)}
            {...props}
          />
        ))
        CardHeader.displayName = "CardHeader"
        
        const CardTitle = React.forwardRef<
          HTMLParagraphElement,
          React.HTMLAttributes<HTMLHeadingElement>
        >(({ className, ...props }, ref) => (
          <h3
            ref={ref}
            className={cn(
              "text-2xl font-semibold leading-none tracking-tight",
              className
            )}
            {...props}
          />
        ))
        CardTitle.displayName = "CardTitle"
        
        const CardDescription = React.forwardRef<
          HTMLParagraphElement,
          React.HTMLAttributes<HTMLParagraphElement>
        >(({ className, ...props }, ref) => (
          <p
            ref={ref}
            className={cn("text-sm text-muted-foreground", className)}
            {...props}
          />
        ))
        CardDescription.displayName = "CardDescription"
        
        const CardContent = React.forwardRef<
          HTMLDivElement,
          React.HTMLAttributes<HTMLDivElement>
        >(({ className, ...props }, ref) => (
          <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
        ))
        CardContent.displayName = "CardContent"
        
        const CardFooter = React.forwardRef<
          HTMLDivElement,
          React.HTMLAttributes<HTMLDivElement>
        >(({ className, ...props }, ref) => (
          <div
            ref={ref}
            className={cn("flex items-center p-6 pt-0", className)}
            {...props}
          />
        ))
        CardFooter.displayName = "CardFooter"
        
        export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
        EOF
        
        # Create components/ui/button.tsx
        cat > components/ui/button.tsx << 'EOF'
        import * as React from "react"
        import { Slot } from "@radix-ui/react-slot"
        import { cva, type VariantProps } from "class-variance-authority"
        import { cn } from "@/lib/utils"
        
        const buttonVariants = cva(
          "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
          {
            variants: {
              variant: {
                default: "bg-primary text-primary-foreground hover:bg-primary/90",
                destructive:
                  "bg-destructive text-destructive-foreground hover:bg-destructive/90",
                outline:
                  "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
                secondary:
                  "bg-secondary text-secondary-foreground hover:bg-secondary/80",
                ghost: "hover:bg-accent hover:text-accent-foreground",
                link: "text-primary underline-offset-4 hover:underline",
              },
              size: {
                default: "h-10 px-4 py-2",
                sm: "h-9 rounded-md px-3",
                lg: "h-11 rounded-md px-8",
                icon: "h-10 w-10",
              },
            },
            defaultVariants: {
              variant: "default",
              size: "default",
            },
          }
        )
        
        export interface ButtonProps
          extends React.ButtonHTMLAttributes<HTMLButtonElement>,
            VariantProps<typeof buttonVariants> {
          asChild?: boolean
        }
        
        const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
          ({ className, variant, size, asChild = false, ...props }, ref) => {
            const Comp = asChild ? Slot : "button"
            return (
              <Comp
                className={cn(buttonVariants({ variant, size, className }))}
                ref={ref}
                {...props}
              />
            )
          }
        )
        Button.displayName = "Button"
        
        export { Button, buttonVariants }
        EOF
        
        # Create components/ui/badge.tsx
        cat > components/ui/badge.tsx << 'EOF'
        import * as React from "react"
        import { cva, type VariantProps } from "class-variance-authority"
        import { cn } from "@/lib/utils"
        
        const badgeVariants = cva(
          "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
          {
            variants: {
              variant: {
                default:
                  "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
                secondary:
                  "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
                destructive:
                  "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
                outline: "text-foreground",
              },
            },
            defaultVariants: {
              variant: "default",
            },
          }
        )
        
        export interface BadgeProps
          extends React.HTMLAttributes<HTMLDivElement>,
            VariantProps<typeof badgeVariants> {}
        
        function Badge({ className, variant, ...props }: BadgeProps) {
          return (
            <div className={cn(badgeVariants({ variant }), className)} {...props} />
          )
        }
        
        export { Badge, badgeVariants }
        EOF
        
        # Create components/ui/input.tsx
        cat > components/ui/input.tsx << 'EOF'
        import * as React from "react"
        import { cn } from "@/lib/utils"
        
        export interface InputProps
          extends React.InputHTMLAttributes<HTMLInputElement> {}
        
        const Input = React.forwardRef<HTMLInputElement, InputProps>(
          ({ className, type, ...props }, ref) => {
            return (
              <input
                type={type}
                className={cn(
                  "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
                  className
                )}
                ref={ref}
                {...props}
              />
            )
          }
        )
        Input.displayName = "Input"
        
        export { Input }
        EOF
        
        # Create components/ui/select.tsx
        cat > components/ui/select.tsx << 'EOF'
        import * as React from "react"
        import * as SelectPrimitive from "@radix-ui/react-select"
        import { Check, ChevronDown, ChevronUp } from "lucide-react"
        import { cn } from "@/lib/utils"
        
        const Select = SelectPrimitive.Root
        const SelectGroup = SelectPrimitive.Group
        const SelectValue = SelectPrimitive.Value
        
        const SelectTrigger = React.forwardRef<
          React.ElementRef<typeof SelectPrimitive.Trigger>,
          React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
        >(({ className, children, ...props }, ref) => (
          <SelectPrimitive.Trigger
            ref={ref}
            className={cn(
              "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
              className
            )}
            {...props}
          >
            {children}
            <SelectPrimitive.Icon asChild>
              <ChevronDown className="h-4 w-4 opacity-50" />
            </SelectPrimitive.Icon>
          </SelectPrimitive.Trigger>
        ))
        SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
        
        const SelectContent = React.forwardRef<
          React.ElementRef<typeof SelectPrimitive.Content>,
          React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
        >(({ className, children, position = "popper", ...props }, ref) => (
          <SelectPrimitive.Portal>
            <SelectPrimitive.Content
              ref={ref}
              className={cn(
                "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
                position === "popper" &&
                  "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
                className
              )}
              position={position}
              {...props}
            >
              <SelectPrimitive.Viewport
                className={cn(
                  "p-1",
                  position === "popper" &&
                    "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
                )}
              >
                {children}
              </SelectPrimitive.Viewport>
            </SelectPrimitive.Content>
          </SelectPrimitive.Portal>
        ))
        SelectContent.displayName = SelectPrimitive.Content.displayName
        
        const SelectItem = React.forwardRef<
          React.ElementRef<typeof SelectPrimitive.Item>,
          React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
        >(({ className, children, ...props }, ref) => (
          <SelectPrimitive.Item
            ref={ref}
            className={cn(
              "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
              className
            )}
            {...props}
          >
            <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
              <SelectPrimitive.ItemIndicator>
                <Check className="h-4 w-4" />
              </SelectPrimitive.ItemIndicator>
            </span>
            <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
          </SelectPrimitive.Item>
        ))
        SelectItem.displayName = SelectPrimitive.Item.displayName
        
        export {
          Select,
          SelectGroup,
          SelectValue,
          SelectTrigger,
          SelectContent,
          SelectItem,
        }
        EOF
        
        echo "✅ UI components created successfully!"
        
    - name: Build application
      run: |
        echo "🔨 Building application..."
        
        # Set build environment
        export NODE_ENV=production
        export NODE_OPTIONS="--max-old-space-size=4096"
        export NEXT_PUBLIC_SKIP_GOOGLE_FONTS=true
        export NEXT_TELEMETRY_DISABLED=1
        export NEXT_PUBLIC_BUILD_TIME=$(date +%s)000
        
        # Build the application
        npx next build
        
        # Verify build
        if [ ! -d ".next" ]; then
          echo "❌ Build failed - .next directory not found"
          exit 1
        fi
        
        echo "✅ Build completed successfully"
        
      env:
        NODE_ENV: production
        NODE_OPTIONS: "--max-old-space-size=4096"
        NEXT_PUBLIC_SKIP_GOOGLE_FONTS: "true"
        NEXT_TELEMETRY_DISABLED: "1"
        
    - name: Deploy to Hostinger VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        timeout: 15m
        command_timeout: 10m
        script: |
          echo "🚀 Starting deployment to Hostinger VPS..."
          
          # Navigate to project directory
          cd /root/jobportal
          
          # Stop PM2 process
          echo "⏹️ Stopping PM2 process..."
          pm2 stop jobportal || true
          pm2 delete jobportal || true
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git pull origin main
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          rm -f package-lock.json
          echo "engine-strict=false" > .npmrc
          echo "legacy-peer-deps=true" >> .npmrc
          echo "fund=false" >> .npmrc
          echo "audit=false" >> .npmrc
          npm install --legacy-peer-deps --engine-strict=false --force
          
          # Install UI dependencies
          npm install --legacy-peer-deps --engine-strict=false \
            tailwindcss postcss autoprefixer @radix-ui/react-slot @radix-ui/react-dialog @radix-ui/react-dropdown-menu @radix-ui/react-toast @radix-ui/react-label @radix-ui/react-checkbox @radix-ui/react-progress @radix-ui/react-select class-variance-authority clsx tailwind-merge lucide-react @heroicons/react
          
          npx prisma generate
          
          # Build with increased memory
          echo "🔨 Building application..."
          export NODE_OPTIONS="--max-old-space-size=4096"
          export NEXT_TELEMETRY_DISABLED=1
          npm run build:fast
          
          # Start PM2 process with production environment
          echo "▶️ Starting application..."
          pm2 start ecosystem.config.cjs --env production
          
          # Check status
          echo "📊 Checking application status..."
          pm2 status
          
          # Test application
          echo "🧪 Testing application..."
          sleep 5
          curl -f http://localhost:3000/api/health || echo "Health check failed"
          
          echo "✅ Deployment completed successfully!"