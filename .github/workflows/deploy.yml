name: 🚀 Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: 🔧 Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        echo "📦 Installing dependencies with Node $(node --version)..."
        npm install --legacy-peer-deps --engine-strict=false --force
        
    - name: 🔨 Build application
      run: |
        echo "🔨 Building application with Node $(node --version)..."
        export NEXT_TELEMETRY_DISABLED=1
        export NODE_ENV=production
        export NEXT_PUBLIC_APP_URL=https://aftionix.in
        export NEXTAUTH_URL=https://aftionix.in
        export NEXTAUTH_SECRET=jobportal-secret-key-2024-aftionix-production-deployment
        export JWT_SECRET=jobportal-jwt-secret-2024-aftionix-production
        export DATABASE_URL="postgresql://postgres:password@localhost:5432/jobportal"
        export AUTH_DISABLED=true
        export NEXT_PUBLIC_BYPASS_OAUTH=true
        npx next build
        
    - name: 🔍 Validate build artifacts
      run: |
        echo "🔍 Validating build artifacts..."
        if [ ! -d ".next" ]; then
          echo "❌ Build failed - .next directory not found"
          exit 1
        fi
        if [ ! -f ".next/BUILD_ID" ]; then
          echo "❌ Build incomplete - BUILD_ID not found"
          exit 1
        fi
        echo "✅ Build artifacts validated successfully"
        
    - name: 🛠️ Generate server.cjs
      run: |
        echo "🛠️ Generating server.cjs from template..."
        cp server-template.cjs server.cjs || echo "server-template.cjs not found, will create on server"
        
    - name: 📥 Prepare SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
        
    - name: 📥 Copy files to server
      run: |
        echo "📥 Copying files to server..."
        rsync -avz --delete \
          -e "ssh -i ~/.ssh/deploy_key -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no" \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.HOST }}:/var/www/jobportal/ \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.github' \
          --exclude='ecosystem.config.cjs'

    - name: 🚀 Deploy to Hostinger VPS
      uses: appleboy/ssh-action@v0.1.9
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        timeout: 20m
        command_timeout: 18m
        debug: true
        script_stop: true
        script: |
          set -e
          echo "🚀 Starting production deployment..."
          
          # Test SSH connection
          echo "🔍 Testing SSH connection..."
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Available space: $(df -h . | tail -1)"
          
          # Navigate to project directory
          cd /var/www/jobportal
          echo "📁 Working in: $(pwd)"
          
          # Verify we can access the directory and files
          if [ ! -d "/var/www/jobportal" ]; then
            echo "❌ Project directory /var/www/jobportal not found"
            exit 1
          fi
          
          if [ ! -f "/var/www/jobportal/package.json" ]; then
            echo "❌ package.json not found - files not copied properly"
            exit 1
          fi
          
          echo "✅ Files successfully copied to server"
          
          # Check Node version and install if needed
          NODE_VERSION=$(node --version 2>/dev/null || echo "not-installed")
          echo "🔍 Current Node version: $NODE_VERSION"
          if [[ ! "$NODE_VERSION" =~ ^v20\. ]]; then
            echo "📦 Installing Node.js 20.x..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            echo "✅ Node.js installed: $(node --version)"
          fi
          
          # Install jq for JSON parsing (needed for PM2 status checks)
          echo "📦 Installing jq for JSON parsing..."
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq || echo "⚠️ jq installation failed, will use fallback methods"
          elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y jq || echo "⚠️ jq installation failed, will use fallback methods"
          elif command -v dnf >/dev/null 2>&1; then
            sudo dnf install -y jq || echo "⚠️ jq installation failed, will use fallback methods"
          else
            echo "⚠️ No compatible package manager found, will use fallback methods"
          fi
          
          # Force kill all PM2 processes and clean up
          echo "💀 Force killing all PM2 processes..."
          pm2 kill || true
          pm2 flush || true
          
          # Clean up previous build artifacts (but preserve .next from local build)
          echo "🧹 Cleaning up previous build artifacts..."
          rm -rf /var/www/jobportal/node_modules
          
          # Verify files were copied
          echo "🔍 Verifying copied files..."
          if [ ! -f "package.json" ]; then
            echo "❌ package.json not found after copy"
            echo "📋 Directory contents:"
            ls -la /var/www/jobportal/ || echo "Directory not accessible"
            echo "📋 Checking source directory:"
            ls -la /github/workspace/ || echo "Source directory not accessible"
            exit 1
          fi
          
          # Check for other critical files
          if [ ! -f "next.config.js" ] && [ ! -f "next.config.mjs" ]; then
            echo "⚠️ Next.js config not found, but continuing..."
          fi
          
          if [ ! -d "prisma" ]; then
            echo "⚠️ Prisma directory not found, but continuing..."
          fi
          
          echo "✅ Files copied successfully"
          
          # Verify build artifacts were copied correctly
          echo "🔍 Verifying build artifacts on server..."
          if [ ! -d ".next" ]; then
            echo "❌ .next directory not found on server"
            echo "📋 Directory contents:"
            ls -la
            exit 1
          fi
          if [ ! -f ".next/BUILD_ID" ]; then
            echo "❌ BUILD_ID not found - build incomplete"
            exit 1
          fi
          if [ ! -f "server.cjs" ]; then
            echo "❌ server.cjs not found on server"
            echo "📋 Available files:"
            ls -la *.cjs *.js 2>/dev/null || echo "No server files found"
            exit 1
          fi
          
          echo "✅ Build artifacts verified on server"
          
          # Generate all server files using Node.js script
          echo "🔧 Generating server files..."
          if [ -f "scripts/generate-server-files.cjs" ]; then
            node scripts/generate-server-files.cjs
          else
            echo "❌ generate-server-files.cjs not found"
            exit 1
          fi
          
          # Install dependencies with better error handling
          echo "📦 Installing dependencies..."
          echo "📋 Creating .npmrc for legacy peer deps..."
          echo "engine-strict=false" > .npmrc
          echo "legacy-peer-deps=true" >> .npmrc
          echo "fund=false" >> .npmrc
          echo "audit=false" >> .npmrc
          echo "loglevel=error" >> .npmrc
          
          # Clean install with proper error handling
          echo "📋 Performing clean npm install..."
              rm -rf node_modules package-lock.json
          
          # Set npm config to ignore optional dependencies and warnings
          npm config set engine-strict false
          npm config set legacy-peer-deps true
          
          # Install with error suppression for optional dependencies
          echo "📦 Installing dependencies (ignoring optional dependency errors)..."
          npm install --legacy-peer-deps --omit=optional --loglevel=error --progress=false || {
            echo "⚠️ npm install had warnings, but continuing..."
            # Check if core dependencies are installed
            if [ -d "node_modules" ] && [ -f "node_modules/next/package.json" ]; then
              echo "✅ Core dependencies installed successfully"
            else
              echo "❌ Critical dependencies missing - failing deployment"
              echo "📋 npm version: $(npm --version)"
              echo "📋 node version: $(node --version)"
                echo "📋 Available space: $(df -h . | tail -1)"
                exit 1
            fi
          }
          
          echo "✅ Dependencies installed successfully"
          
          # Generate Prisma client (if Prisma is used)
          if [ -d "prisma" ] && [ -f "prisma/schema.prisma" ]; then
            echo "🗄️ Generating Prisma client..."
            if ! npx prisma generate; then
              echo "❌ Prisma client generation failed"
              echo "📋 Checking Prisma schema..."
              ls -la prisma/ || echo "No prisma directory found"
              head -20 prisma/schema.prisma || echo "Cannot read schema file"
              echo "📋 Checking Prisma version..."
              npx prisma --version || echo "Prisma not found"
              exit 1
            fi
            echo "✅ Prisma client generated successfully"
          else
            echo "⚠️ Prisma not found, skipping Prisma client generation"
          fi
          
          # Build already completed locally, just verify it exists
          echo "🔍 Verifying build artifacts from local build..."
          if [ ! -d ".next" ]; then
            echo "❌ Build artifacts not found - local build may have failed"
            echo "📋 Directory contents:"
            ls -la | head -20
                exit 1
          fi
          
          if [ ! -f ".next/BUILD_ID" ]; then
            echo "❌ Build incomplete - BUILD_ID not found"
            echo "📋 .next directory contents:"
            ls -la .next/ || echo "Cannot list .next directory"
            exit 1
          fi
          
          echo "✅ Build artifacts verified - using local build"
          
          # Create log directory
          echo "📁 Creating log directory..."
          sudo mkdir -p /var/log/jobportal
          sudo chown -R $USER:$USER /var/log/jobportal
          
          # Environment variables are already set in .env file
          echo "🔧 Environment variables configured in .env file"
          
          # Server files are already generated by the Node.js script above
          echo "✅ Server files already generated"
          
          # Validate server.cjs file
          echo "🔍 Validating server.cjs file..."
          if [ ! -f "server.cjs" ]; then
            echo "❌ server.cjs not found!"
            exit 1
          fi
          
          echo "📋 server.cjs file size: $(wc -c < server.cjs) bytes"
          echo "📋 First 3 lines of server.cjs:"
          head -3 server.cjs || echo "Cannot read server.cjs"
          
          # Check for shell script corruption patterns
          if grep -q "DRONE_SSH_PREV_COMMAND_EXIT_CODE" server.cjs; then
            echo "❌ server.cjs contains shell script syntax - corruption detected!"
            echo "📋 Corrupted content:"
            head -10 server.cjs
            echo "🔄 Regenerating server.cjs..."
            node scripts/generate-server-files.cjs
            echo "✅ server.cjs regenerated successfully"
          fi
          
          # Additional corruption checks
          if grep -q "\$DRONE_SSH" server.cjs || grep -q "exit \$" server.cjs; then
            echo "❌ Additional shell script corruption detected!"
            exit 1
          fi
          
          # Verify server.cjs is valid JavaScript
          echo "🔍 Verifying server.cjs syntax..."
          if node -c server.cjs; then
            echo "✅ server.cjs syntax is valid"
          else
            echo "❌ server.cjs syntax error!"
            echo "📋 Syntax error details:"
            node -c server.cjs 2>&1 || true
            exit 1
          fi
          
          # ecosystem.config.cjs is already generated by the Node.js script
          echo "✅ ecosystem.config.cjs already generated"
          
          # Verify ecosystem.config.cjs is valid JavaScript
          echo "🔍 Verifying ecosystem.config.cjs syntax..."
          if node -c ecosystem.config.cjs; then
            echo "✅ ecosystem.config.cjs syntax is valid"
          else
            echo "❌ ecosystem.config.cjs syntax error!"
            exit 1
          fi
          
          # Final verification of server files
          echo "🔍 Final verification of server files..."
          echo "📋 server.cjs first 5 lines:"
          head -5 server.cjs || echo "Cannot read server.cjs"
          echo "📋 ecosystem.config.cjs first 5 lines:"
          head -5 ecosystem.config.cjs || echo "Cannot read ecosystem.config.cjs"
          
          # Server syntax validation already done above
          
          # Final verification before PM2 start
          echo "🔍 Final verification before PM2 start..."
          if grep -q "DRONE_SSH_PREV_COMMAND_EXIT_CODE" server.cjs; then
            echo "❌ server.cjs corrupted - this should not happen with heredoc method"
            echo "📋 Corrupted content:"
            head -5 server.cjs
            exit 1
          else
            echo "✅ server.cjs is clean and ready for PM2"
          fi
          
          # Start the application with PM2
          echo "🚀 Starting application with PM2..."
          pm2 start ecosystem.config.cjs --env production --update-env
          
          # Wait for PM2 to fully start
          echo "⏳ Waiting for PM2 to fully start..."
          sleep 30
          
          # Save PM2 configuration and setup startup
          echo "💾 Saving PM2 configuration..."
          pm2 save
          
          # Setup PM2 to start on boot
          echo "🔄 Setting up PM2 startup..."
          pm2 startup systemd -u $USER --hp $HOME || echo "⚠️ PM2 startup setup failed, but continuing..."
          
          # Comprehensive PM2 status check
          echo "🔍 PM2 Status Check..."
          pm2 status
          pm2 describe jobportal || echo "⚠️ PM2 describe failed"
          
          # Skip PM2 logs to avoid hanging
          echo "📋 PM2 logs available via: pm2 logs jobportal"
          
          # Check if process is actually running
          echo "📊 Process Check:"
          ps aux | grep node || echo "No node processes found"
          
          # Simple health check
          echo "🏥 Performing health check..."
          sleep 10
          
          # Check PM2 status
          echo "📊 PM2 Status:"
          pm2 status
            
            # Check if port is listening
            if netstat -tlnp | grep -q ":3000"; then
              echo "✅ Port 3000 is listening"
              
            # Test basic connectivity
              echo "🔍 Testing basic connectivity..."
              if curl -f -s --max-time 5 http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ Application is responding"
            else
              echo "⚠️ Application not responding yet - may need more time"
            fi
          else
            echo "❌ Port 3000 not listening"
            echo "📋 Checking PM2 logs..."
              pm2 logs jobportal --lines 10 --nostream || echo "Could not retrieve PM2 logs"
                exit 1
          fi
          
          echo "✅ Production deployment completed successfully!"
          echo "🌐 Application is available at: http://localhost:3000"
          echo "📊 Final Status:"
          pm2 status