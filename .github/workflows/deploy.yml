name: Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies with Node $(node --version)..."
        
        # Clean up
        rm -rf node_modules .next .npm .tsbuildinfo
        npm cache clean --force
        
        # Create .npmrc for compatibility
        cat > .npmrc << 'EOF'
        engine-strict=false
        legacy-peer-deps=true
        fund=false
        audit=false
        auto-install-peers=true
        EOF
        
        # Install all dependencies
        echo "📦 Installing all dependencies..."
        npm install --legacy-peer-deps --engine-strict=false --force
        
        # Install TailwindCSS and PostCSS explicitly
        echo "🎨 Installing TailwindCSS and PostCSS..."
        npm install --save-dev --legacy-peer-deps --engine-strict=false \
          tailwindcss@3.4.18 \
          postcss@8.4.47 \
          autoprefixer@10.4.20
        
        # Install UI dependencies
        echo "🎨 Installing UI dependencies..."
        npm install --legacy-peer-deps --engine-strict=false \
          @radix-ui/react-slot@1.2.3 \
          @radix-ui/react-dialog@1.1.15 \
          @radix-ui/react-dropdown-menu@2.1.16 \
          @radix-ui/react-toast@1.2.15 \
          @radix-ui/react-label@2.1.1 \
          @radix-ui/react-checkbox@1.1.2 \
          @radix-ui/react-progress@1.1.1 \
          @radix-ui/react-select@2.2.5 \
          class-variance-authority@0.7.1 \
          clsx@2.1.1 \
          tailwind-merge@2.6.0 \
          lucide-react@0.525.0 \
          @heroicons/react@2.2.0
        
        # Generate Prisma client
        npx prisma generate
        
        # Create UI components
        echo "🔧 Creating UI components..."
        mkdir -p components/ui lib
        
        # Create lib/utils.ts
        cat > lib/utils.ts << 'EOF'
        import { type ClassValue, clsx } from "clsx"
        import { twMerge } from "tailwind-merge"
        
        export function cn(...inputs: ClassValue[]) {
          return twMerge(clsx(inputs))
        }
        EOF
        
        # Create components/ui/card.tsx
        cat > components/ui/card.tsx << 'EOF'
        import * as React from "react"
        import { cn } from "@/lib/utils"
        
        const Card = React.forwardRef<
          HTMLDivElement,
          React.HTMLAttributes<HTMLDivElement>
        >(({ className, ...props }, ref) => (
          <div
            ref={ref}
            className={cn(
              "rounded-lg border bg-card text-card-foreground shadow-sm",
              className
            )}
            {...props}
          />
        ))
        Card.displayName = "Card"
        
        const CardHeader = React.forwardRef<
          HTMLDivElement,
          React.HTMLAttributes<HTMLDivElement>
        >(({ className, ...props }, ref) => (
          <div
            ref={ref}
            className={cn("flex flex-col space-y-1.5 p-6", className)}
            {...props}
          />
        ))
        CardHeader.displayName = "CardHeader"
        
        const CardTitle = React.forwardRef<
          HTMLParagraphElement,
          React.HTMLAttributes<HTMLHeadingElement>
        >(({ className, ...props }, ref) => (
          <h3
            ref={ref}
            className={cn(
              "text-2xl font-semibold leading-none tracking-tight",
              className
            )}
            {...props}
          />
        ))
        CardTitle.displayName = "CardTitle"
        
        const CardDescription = React.forwardRef<
          HTMLParagraphElement,
          React.HTMLAttributes<HTMLParagraphElement>
        >(({ className, ...props }, ref) => (
          <p
            ref={ref}
            className={cn("text-sm text-muted-foreground", className)}
            {...props}
          />
        ))
        CardDescription.displayName = "CardDescription"
        
        const CardContent = React.forwardRef<
          HTMLDivElement,
          React.HTMLAttributes<HTMLDivElement>
        >(({ className, ...props }, ref) => (
          <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
        ))
        CardContent.displayName = "CardContent"
        
        const CardFooter = React.forwardRef<
          HTMLDivElement,
          React.HTMLAttributes<HTMLDivElement>
        >(({ className, ...props }, ref) => (
          <div
            ref={ref}
            className={cn("flex items-center p-6 pt-0", className)}
            {...props}
          />
        ))
        CardFooter.displayName = "CardFooter"
        
        export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
        EOF
        
        # Create components/ui/button.tsx
        cat > components/ui/button.tsx << 'EOF'
        import * as React from "react"
        import { Slot } from "@radix-ui/react-slot"
        import { cva, type VariantProps } from "class-variance-authority"
        import { cn } from "@/lib/utils"
        
        const buttonVariants = cva(
          "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
          {
            variants: {
              variant: {
                default: "bg-primary text-primary-foreground hover:bg-primary/90",
                destructive:
                  "bg-destructive text-destructive-foreground hover:bg-destructive/90",
                outline:
                  "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
                secondary:
                  "bg-secondary text-secondary-foreground hover:bg-secondary/80",
                ghost: "hover:bg-accent hover:text-accent-foreground",
                link: "text-primary underline-offset-4 hover:underline",
              },
              size: {
                default: "h-10 px-4 py-2",
                sm: "h-9 rounded-md px-3",
                lg: "h-11 rounded-md px-8",
                icon: "h-10 w-10",
              },
            },
            defaultVariants: {
              variant: "default",
              size: "default",
            },
          }
        )
        
        export interface ButtonProps
          extends React.ButtonHTMLAttributes<HTMLButtonElement>,
            VariantProps<typeof buttonVariants> {
          asChild?: boolean
        }
        
        const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
          ({ className, variant, size, asChild = false, ...props }, ref) => {
            const Comp = asChild ? Slot : "button"
            return (
              <Comp
                className={cn(buttonVariants({ variant, size, className }))}
                ref={ref}
                {...props}
              />
            )
          }
        )
        Button.displayName = "Button"
        
        export { Button, buttonVariants }
        EOF
        
        # Create components/ui/badge.tsx
        cat > components/ui/badge.tsx << 'EOF'
        import * as React from "react"
        import { cva, type VariantProps } from "class-variance-authority"
        import { cn } from "@/lib/utils"
        
        const badgeVariants = cva(
          "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
          {
            variants: {
              variant: {
                default:
                  "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
                secondary:
                  "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
                destructive:
                  "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
                outline: "text-foreground",
              },
            },
            defaultVariants: {
              variant: "default",
            },
          }
        )
        
        export interface BadgeProps
          extends React.HTMLAttributes<HTMLDivElement>,
            VariantProps<typeof badgeVariants> {}
        
        function Badge({ className, variant, ...props }: BadgeProps) {
          return (
            <div className={cn(badgeVariants({ variant }), className)} {...props} />
          )
        }
        
        export { Badge, badgeVariants }
        EOF
        
        # Create components/ui/input.tsx
        cat > components/ui/input.tsx << 'EOF'
        import * as React from "react"
        import { cn } from "@/lib/utils"
        
        export interface InputProps
          extends React.InputHTMLAttributes<HTMLInputElement> {}
        
        const Input = React.forwardRef<HTMLInputElement, InputProps>(
          ({ className, type, ...props }, ref) => {
            return (
              <input
                type={type}
                className={cn(
                  "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
                  className
                )}
                ref={ref}
                {...props}
              />
            )
          }
        )
        Input.displayName = "Input"
        
        export { Input }
        EOF
        
        # Verify installation
        echo "🔍 Verifying installation..."
        if ! npm list tailwindcss > /dev/null 2>&1; then
          echo "❌ TailwindCSS not found"
          exit 1
        fi
        if [ ! -f "components/ui/card.tsx" ]; then
          echo "❌ UI components not created"
          exit 1
        fi
        echo "✅ Installation verified"
        
      env:
        NODE_ENV: production
        
    - name: Build application
      run: |
        echo "🔨 Building application with Node $(node --version)..."
        
        # Build with optimized settings
        NODE_ENV=production \
        NODE_OPTIONS="--max-old-space-size=4096" \
        NEXT_PUBLIC_SKIP_GOOGLE_FONTS=true \
        NEXT_TELEMETRY_DISABLED=1 \
        npx next build
        
        # Verify build
        if [ ! -d ".next" ]; then
          echo "❌ Build failed"
          exit 1
        fi
        
        echo "✅ Build completed successfully"
        
      env:
        NODE_ENV: production
        NODE_OPTIONS: "--max-old-space-size=4096"
        NEXT_PUBLIC_SKIP_GOOGLE_FONTS: "true"
        NEXT_TELEMETRY_DISABLED: "1"
        
    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        timeout: 30m
        command_timeout: 25m
        debug: true
        script: |
          set -e
          echo "🚀 Starting production deployment..."
          
          # Navigate to project directory
          cd /root/jobportal
          echo "📁 Current directory: $(pwd)"
          
          # Check Node version
          echo "🔍 Checking Node version..."
          NODE_VERSION=$(node --version)
          echo "Current Node version: $NODE_VERSION"
          
          # Install Node 20 if not already installed
          if [[ ! "$NODE_VERSION" =~ ^v20\. ]]; then
            echo "⚠️ Node 20 required, current version: $NODE_VERSION"
            echo "📦 Installing Node 20..."
            
            # Install Node 20 using NodeSource repository
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            
            # Verify installation
            NEW_NODE_VERSION=$(node --version)
            echo "✅ Node updated to: $NEW_NODE_VERSION"
          else
            echo "✅ Node version is correct: $NODE_VERSION"
          fi
          
          # Stop PM2 process
          echo "⏹️ Stopping PM2 process..."
          pm2 stop jobportal || true
          pm2 delete jobportal || true
          pm2 kill || true
          
          # Force clean git pull - overwrite local changes
          echo "🔄 Force cleaning git state..."
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          git pull origin main
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          rm -f package-lock.json
          cat > .npmrc << 'EOF'
          engine-strict=false
          legacy-peer-deps=true
          fund=false
          audit=false
          auto-install-peers=true
          EOF
          
          # Clean install
          rm -rf node_modules .next
          npm cache clean --force
          npm install --legacy-peer-deps --engine-strict=false --force
          
          # Install TailwindCSS and UI dependencies
          echo "🎨 Installing TailwindCSS and UI dependencies..."
          npm install --save-dev --legacy-peer-deps --engine-strict=false \
            tailwindcss@3.4.18 \
            postcss@8.4.47 \
            autoprefixer@10.4.20
          
          npm install --legacy-peer-deps --engine-strict=false \
            @radix-ui/react-slot@1.2.3 \
            @radix-ui/react-dialog@1.1.15 \
            @radix-ui/react-dropdown-menu@2.1.16 \
            @radix-ui/react-toast@1.2.15 \
            @radix-ui/react-label@2.1.1 \
            @radix-ui/react-checkbox@1.1.2 \
            @radix-ui/react-progress@1.1.1 \
            @radix-ui/react-select@2.2.5 \
            class-variance-authority@0.7.1 \
            clsx@2.1.1 \
            tailwind-merge@2.6.0 \
            lucide-react@0.525.0 \
            @heroicons/react@2.2.0
          
          # Generate Prisma client
          npx prisma generate
          
          # Create UI components on server
          echo "🔧 Creating UI components on server..."
          mkdir -p components/ui lib
          
          # Create lib/utils.ts
          cat > lib/utils.ts << 'EOF'
          import { type ClassValue, clsx } from "clsx"
          import { twMerge } from "tailwind-merge"
          
          export function cn(...inputs: ClassValue[]) {
            return twMerge(clsx(inputs))
          }
          EOF
          
          # Create components/ui/card.tsx
          cat > components/ui/card.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "@/lib/utils"
          
          const Card = React.forwardRef<
            HTMLDivElement,
            React.HTMLAttributes<HTMLDivElement>
          >(({ className, ...props }, ref) => (
            <div
              ref={ref}
              className={cn(
                "rounded-lg border bg-card text-card-foreground shadow-sm",
                className
              )}
              {...props}
            />
          ))
          Card.displayName = "Card"
          
          const CardHeader = React.forwardRef<
            HTMLDivElement,
            React.HTMLAttributes<HTMLDivElement>
          >(({ className, ...props }, ref) => (
            <div
              ref={ref}
              className={cn("flex flex-col space-y-1.5 p-6", className)}
              {...props}
            />
          ))
          CardHeader.displayName = "CardHeader"
          
          const CardTitle = React.forwardRef<
            HTMLParagraphElement,
            React.HTMLAttributes<HTMLHeadingElement>
          >(({ className, ...props }, ref) => (
            <h3
              ref={ref}
              className={cn(
                "text-2xl font-semibold leading-none tracking-tight",
                className
              )}
              {...props}
            />
          ))
          CardTitle.displayName = "CardTitle"
          
          const CardDescription = React.forwardRef<
            HTMLParagraphElement,
            React.HTMLAttributes<HTMLParagraphElement>
          >(({ className, ...props }, ref) => (
            <p
              ref={ref}
              className={cn("text-sm text-muted-foreground", className)}
              {...props}
            />
          ))
          CardDescription.displayName = "CardDescription"
          
          const CardContent = React.forwardRef<
            HTMLDivElement,
            React.HTMLAttributes<HTMLDivElement>
          >(({ className, ...props }, ref) => (
            <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
          ))
          CardContent.displayName = "CardContent"
          
          const CardFooter = React.forwardRef<
            HTMLDivElement,
            React.HTMLAttributes<HTMLDivElement>
          >(({ className, ...props }, ref) => (
            <div
              ref={ref}
              className={cn("flex items-center p-6 pt-0", className)}
              {...props}
            />
          ))
          CardFooter.displayName = "CardFooter"
          
          export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
          EOF
          
          # Create components/ui/button.tsx
          cat > components/ui/button.tsx << 'EOF'
          import * as React from "react"
          import { Slot } from "@radix-ui/react-slot"
          import { cva, type VariantProps } from "class-variance-authority"
          import { cn } from "@/lib/utils"
          
          const buttonVariants = cva(
            "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
            {
              variants: {
                variant: {
                  default: "bg-primary text-primary-foreground hover:bg-primary/90",
                  destructive:
                    "bg-destructive text-destructive-foreground hover:bg-destructive/90",
                  outline:
                    "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
                  secondary:
                    "bg-secondary text-secondary-foreground hover:bg-secondary/80",
                  ghost: "hover:bg-accent hover:text-accent-foreground",
                  link: "text-primary underline-offset-4 hover:underline",
                },
                size: {
                  default: "h-10 px-4 py-2",
                  sm: "h-9 rounded-md px-3",
                  lg: "h-11 rounded-md px-8",
                  icon: "h-10 w-10",
                },
              },
              defaultVariants: {
                variant: "default",
                size: "default",
              },
            }
          )
          
          export interface ButtonProps
            extends React.ButtonHTMLAttributes<HTMLButtonElement>,
              VariantProps<typeof buttonVariants> {
            asChild?: boolean
          }
          
          const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
            ({ className, variant, size, asChild = false, ...props }, ref) => {
              const Comp = asChild ? Slot : "button"
              return (
                <Comp
                  className={cn(buttonVariants({ variant, size, className }))}
                  ref={ref}
                  {...props}
                />
              )
            }
          )
          Button.displayName = "Button"
          
          export { Button, buttonVariants }
          EOF
          
          # Create components/ui/badge.tsx
          cat > components/ui/badge.tsx << 'EOF'
          import * as React from "react"
          import { cva, type VariantProps } from "class-variance-authority"
          import { cn } from "@/lib/utils"
          
          const badgeVariants = cva(
            "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
            {
              variants: {
                variant: {
                  default:
                    "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
                  secondary:
                    "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
                  destructive:
                    "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
                  outline: "text-foreground",
                },
              },
              defaultVariants: {
                variant: "default",
              },
            }
          )
          
          export interface BadgeProps
            extends React.HTMLAttributes<HTMLDivElement>,
              VariantProps<typeof badgeVariants> {}
          
          function Badge({ className, variant, ...props }: BadgeProps) {
            return (
              <div className={cn(badgeVariants({ variant }), className)} {...props} />
            )
          }
          
          export { Badge, badgeVariants }
          EOF
          
          # Create components/ui/input.tsx
          cat > components/ui/input.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "@/lib/utils"
          
          export interface InputProps
            extends React.InputHTMLAttributes<HTMLInputElement> {}
          
          const Input = React.forwardRef<HTMLInputElement, InputProps>(
            ({ className, type, ...props }, ref) => {
              return (
                <input
                  type={type}
                  className={cn(
                    "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
                    className
                  )}
                  ref={ref}
                  {...props}
                />
              )
            }
          )
          Input.displayName = "Input"
          
          export { Input }
          EOF
          
          # Build application
          echo "🔨 Building application..."
          export NODE_OPTIONS="--max-old-space-size=4096"
          export NEXT_TELEMETRY_DISABLED=1
          export NODE_ENV=production
          
          # Use the build command from package.json
          npm run build
          
          # Verify build
          if [ ! -d ".next" ]; then
            echo "❌ Build failed on server"
            exit 1
          fi
          echo "✅ Build completed on server"
          
          # Create log directory
          mkdir -p /var/log/jobportal
          chmod 755 /var/log/jobportal
          
          # Start PM2 process
          echo "▶️ Starting application..."
          pm2 start ecosystem.config.cjs --env production --no-daemon
          
          # Wait for startup
          echo "⏳ Waiting for application to start..."
          sleep 20
          
          # Check status
          echo "📊 Checking application status..."
          pm2 status
          
          # Test application
          echo "🧪 Testing application..."
          sleep 10
          
          # Health check with better error handling
          echo "🏥 Performing health check..."
          HEALTH_CHECK_PASSED=false
          for i in {1..10}; do
            echo "Health check attempt $i/10..."
            if curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "❌ Health check failed (attempt $i/10), waiting 15 seconds..."
              sleep 15
            fi
          done
          
          # Show logs for debugging
          echo "📋 PM2 logs:"
          pm2 logs jobportal --lines 50
          
          # Final status check
          echo "🔍 Final status check..."
          pm2 status
          
          # Show process info
          echo "📊 Process information:"
          ps aux | grep node | grep -v grep || true
          
          # Check if health check passed
          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "❌ Health check failed after 10 attempts"
            echo "📋 Final PM2 logs:"
            pm2 logs jobportal --lines 100
            exit 1
          fi
          
          echo "✅ Production deployment completed successfully!"