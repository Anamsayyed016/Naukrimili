generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id                Int           @id @default(autoincrement())
  source            String        @default("manual")
  sourceId          String        @default(cuid())
  title             String
  company           String?
  companyLogo       String?
  location          String?
  country           String        @default("IN")
  description       String
  requirements      String?
  applyUrl          String?
  apply_url         String?
  source_url        String?
  postedAt          DateTime?
  expiryDate        DateTime?     // New field for job expiration
  salary            String?
  salaryMin         Int?
  salaryMax         Int?
  salaryCurrency    String?
  jobType           String?
  experienceLevel   String?
  skills            String
  isRemote          Boolean       @default(false)
  isHybrid          Boolean       @default(false)
  isUrgent          Boolean       @default(false)
  isFeatured        Boolean       @default(false)
  isActive          Boolean       @default(true)
  sector            String?
  views             Int           @default(0)
  applicationsCount Int           @default(0)
  createdBy         String?
  companyId         String?
  rawJson           Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?
  applications      Application[]
  companyRelation   Company?      @relation(fields: [companyId], references: [id])
  creator           User?         @relation(fields: [createdBy], references: [id])
  bookmarks         JobBookmark[]

  @@unique([source, sourceId])
  @@index([isActive, createdAt])
  @@index([country, location, isActive])
  @@index([salaryMin, salaryMax, isActive])
  @@index([jobType, experienceLevel, isActive])
  @@index([isRemote, isHybrid, isActive])
  @@index([sector, isFeatured, isActive])
  @@index([source, sourceId])
  @@index([companyId])
  @@index([createdBy])
  @@index([postedAt])
  @@index([title])
  @@index([description])
  @@index([skills])
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  emailVerified      DateTime?
  // name String? (computed from firstName + lastName)
  image              String?
  password           String?
  firstName          String?
  lastName           String?
  role               String?
  roleLocked         Boolean        @default(false)
  lockedRole         String?
  roleLockReason     String?
  phone              String?
  location           String?
  bio                String?
  skills             String         @default("[]")
  experience         String?
  education          String?
  profilePicture     String?
  isVerified         Boolean        @default(false)
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?
  resumeUrl          String?
  locationPreference String?
  salaryExpectation  Int?
  jobTypePreference  String?
  remotePreference   Boolean        @default(false)
  companyName        String?
  recruiterName      String?
  companyWebsite     String?
  companyIndustry    String?
  companySize        String?
  companyFounded     Int?
  accounts           Account[]
  applications       Application[]
  createdCompanies   Company[]
  createdJobs        Job[]
  bookmarks          JobBookmark[]
  receivedMessages   Message[]      @relation("ReceivedMessages")
  sentMessages       Message[]      @relation("SentMessages")
  notifications      Notification[]
  resumes            Resume[]
  resumeViews        ResumeView[]
  sessions           Session[]
  settings           Settings[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JobBookmark {
  id        String   @id @default(cuid())
  userId    String
  jobId     Int
  notes     String?
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
}

model Company {
  id           String        @id @default(cuid())
  name         String
  description  String?
  logo         String?
  website      String?
  location     String?
  industry     String?
  size         String?
  founded      Int?
  isVerified   Boolean       @default(false)
  isActive     Boolean       @default(true)
  socialLinks  String?
  createdBy    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?
  applications Application[]
  resumeViews  ResumeView[]
  creator      User?         @relation(fields: [createdBy], references: [id])
  jobs         Job[]

  @@index([createdBy])
  @@index([industry])
  @@index([location])
}

model Resume {
  id            String        @id @default(cuid())
  userId        String
  fileName      String
  fileUrl       String
  fileSize      Int?
  mimeType      String?
  parsedData    Json?
  atsScore      Int?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?
  isBuilder     Boolean       @default(false)
  templateStyle String?
  builderData   Json?
  colorScheme   String?
  applications  Application[]
  views         ResumeView[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Application {
  id          String   @id @default(cuid())
  userId      String
  jobId       Int
  companyId   String?
  resumeId    String?
  status      String   @default("submitted")
  coverLetter String?
  notes       String?
  isFavorite  Boolean  @default(false)
  appliedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?
  applicationData Json? // Store additional application form data
  company     Company? @relation(fields: [companyId], references: [id])
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  resume      Resume?  @relation(fields: [resumeId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
  @@index([status])
  @@index([isFavorite])
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  isRead      Boolean  @default(false)
  messageType String   @default("text")
  createdAt   DateTime @default(now())
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?
}

model Settings {
  id        String   @id @default(cuid())
  userId    String
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([userId])
}

model StaticContent {
  id        String   @id @default(cuid())
  key       String   @unique
  title     String
  content   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?

  @@index([key])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  benefits     String?
  specialties  String?
  culture      String?
  mission      String?
  vision       String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

model ResumeView {
  id          String   @id @default(cuid())
  resumeId    String
  viewerId    String
  viewerType  String   // 'employer', 'admin', 'other'
  companyId   String?
  viewedAt    DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  viewer      User     @relation(fields: [viewerId], references: [id], onDelete: Cascade)
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  @@index([resumeId])
  @@index([viewerId])
  @@index([viewedAt])
  @@index([companyId])
  @@unique([resumeId, viewerId, viewedAt], name: "unique_view_per_hour")
}

model MobileError {
  id                String    @id @default(cuid())
  errorId           String    @unique
  message           String
  stack             String?
  componentStack    String?
  isMobile          Boolean   @default(false)
  userAgent         String?
  timestamp         DateTime
  url               String?
  screenSize        String?
  viewport          String?
  devicePixelRatio  Float?
  touchSupport      Boolean   @default(false)
  protocol          String?
  hostname String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([timestamp])
  @@index([isMobile])
  @@index([hostname])
}