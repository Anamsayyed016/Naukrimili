// Minimal Prisma schema focusing on external job aggregation storage only.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id              String    @id @default(cuid())
  source          String    @default("manual")
  sourceId        String    @default(cuid())
  title           String
  company         String?
  companyLogo     String?   // Company logo URL
  location        String?
  country         String    @default("IN")
  description     String
  requirements    String  
  applyUrl        String?   // @deprecated - use apply_url instead
  apply_url       String?   // New field for internal application URL
  source_url      String?   // New field for external source URL
  postedAt        DateTime?
  salary          String?
  salaryMin       Int?      // Minimum salary in local currency
  salaryMax       Int?      // Maximum salary in local currency  
  salaryCurrency  String?   // Currency code (INR, USD, etc.)
  jobType         String?   // full-time, part-time, contract, internship
  experienceLevel String?   // entry, mid, senior, executive
  skills          String   // Array of required skills
  isRemote        Boolean   @default(false)
  isHybrid        Boolean   @default(false)
  isUrgent        Boolean   @default(false)
  isFeatured      Boolean   @default(false)
  isActive        Boolean   @default(true)
  sector          String?   // Technology, Finance, Healthcare, etc.
  views           Int       @default(0)
  applicationsCount Int     @default(0)
  createdBy       String?   // User who created this job
  companyId       String?   // Company this job belongs to
  rawJson         Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  bookmarks       JobBookmark[]
  applications    Application[]
  companyRelation Company?  @relation(fields: [companyId], references: [id])
  creator         User?     @relation(fields: [createdBy], references: [id])
  
  @@unique([source, sourceId])
  @@index([isActive, createdAt])
  @@index([country, location, isActive])
  @@index([salaryMin, salaryMax, isActive])
  @@index([jobType, experienceLevel, isActive])
  @@index([isRemote, isHybrid, isActive])
  @@index([sector, isFeatured, isActive])
  @@index([source, sourceId])
  @@index([companyId])
  @@index([createdBy])
  @@index([postedAt])
  @@index([title], type: Gin)
  @@index([description], type: Gin)
  @@index([skills], type: Gin)
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  emailVerified   DateTime?
  name            String?
  image           String?
  password        String?   // Optional for OAuth users
  firstName       String?
  lastName        String?
  role            String?   // jobseeker, employer, admin (null means role not selected yet)
  phone           String?
  location        String?
  bio             String?   
  skills          String  
  experience      String?   
  education       String?   
  profilePicture  String?
  isVerified      Boolean   @default(false)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Job Seeker specific fields
  resumeUrl       String?   // Resume file URL
  locationPreference String? // Preferred job locations
  salaryExpectation Int?    // Expected salary
  jobTypePreference String  // full-time, part-time, contract, internship
  remotePreference Boolean  @default(false) // Remote work preference
  
  // Employer specific fields
  companyName     String?   // Company name
  recruiterName  String?   // Recruiter's name
  companyWebsite  String?   // Company website
  companyIndustry String?   // Company industry
  companySize     String?   // Company size (1-10, 11-50, etc.)
  companyFounded  Int?      // Company founding year
  
  // OAuth Relations
  accounts        Account[]
  sessions        Session[]
  
  // Relations  
  bookmarks       JobBookmark[]
  createdJobs     Job[]
  createdCompanies Company[]
  resumes         Resume[]
  applications    Application[]
  sentMessages    Message[]   @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  settings        Settings[]
  notifications   Notification[]
}

// NextAuth.js OAuth Account Model
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  
  access_token      String?  
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth.js Session Model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

// NextAuth.js Verification Token Model
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JobBookmark {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  notes     String?  
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
}

model Company {
  id              String   @id @default(cuid())
  name            String
  description     String?  
  logo            String?
  website         String?
  location        String?
  industry        String?
  size            String?  // e.g., "1-10", "11-50", "51-200", etc.
  founded         Int?
  isVerified      Boolean  @default(false)
  createdBy       String?  // User who created this company
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  jobs            Job[]
  creator         User?    @relation(fields: [createdBy], references: [id])
  applications    Application[]
  
  @@index([createdBy])
  @@index([industry])
  @@index([location])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String
  fileName  String
  fileUrl   String
  fileSize  Int?
  mimeType  String?
  parsedData Json?   // AI-extracted resume data
  atsScore  Int?     // ATS compatibility score
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // NEW: Builder-specific fields
  isBuilder     Boolean  @default(false) // Distinguish upload vs builder
  templateStyle String?  // For builder resumes (e.g., "modern", "classic", "creative")
  builderData   Json?    // Builder-generated content structure
  colorScheme   String?  // Color theme for builder resumes
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
  
  @@index([userId])
}

model Application {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  companyId String
  resumeId  String?
  status    String   @default("submitted") // submitted, reviewed, interview, rejected, hired
  coverLetter String? 
  notes     String?  
  appliedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  company     Company? @relation(fields: [companyId], references: [id])
  resume      Resume?  @relation(fields: [resumeId], references: [id])
  
  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
  @@index([status])
}

model Message {
  id              String   @id @default(cuid())
  senderId        String
  receiverId      String
  content         String   
  isRead          Boolean  @default(false)
  messageType     String   @default("text") // text, system, notification
  createdAt       DateTime @default(now())
  
  // Relations
  sender         User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Settings {
  id        String   @id @default(cuid())
  userId    String
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
  @@index([userId])
}

model StaticContent {
  id        String   @id @default(cuid())
  key       String   @unique // e.g., "terms", "privacy", "about"
  title     String
  content   String   
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([key])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // WELCOME, JOB_MATCH, APPLICATION_UPDATE, SYSTEM, etc.
  title     String
  message   String   
  isRead    Boolean  @default(false)
  data      Json?    // Additional notification data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

