generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  name              String?
  image             String?
  role              Role     @default(JOBSEEKER)
  profileCompletion Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  jobs              Job[]
  applications      Application[]
  profile           Profile?
  
  @@map("users")
}

model Profile {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique @db.ObjectId
  skills   String[]
  location String?
  bio      String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

model Job {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  company     String
  location    String
  description String
  requirements String[]
  benefits    String[]
  skills      String[]
  salary      SalaryRange?
  type        JobType     @default(FULL_TIME)
  level       ExperienceLevel @default(ENTRY)
  remote      Boolean     @default(false)
  status      JobStatus   @default(PUBLISHED)
  sector      String?
  views       Int         @default(0)
  applications Int        @default(0)
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String      @db.ObjectId
  
  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
  
  @@map("jobs")
  @@index([userId])
  @@index([status])
}

model Application {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String            @db.ObjectId
  jobId     String            @db.ObjectId
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@map("applications")
}

model FraudReport {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  description String
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("fraud_reports")
}

enum Role {
  ADMIN
  JOBSEEKER
  COMPANY
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  REMOTE
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEWED
  OFFERED
  REJECTED
  WITHDRAWN
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
  EXECUTIVE
}

type SalaryRange {
  min         Int
  max         Int
  currency    String
}

// Types for job matching
type Skill {
  name        String
  level       String
  category    String
}

type JobPreferences {
  location    String[]
  salary_min  Int?
  salary_max  Int?
  job_types   JobType[]
  sectors     String[]
}

type SeekerPreferences {
  skills           Skill[]
  experience_level String
  job_preferences  JobPreferences
  availability     String
}