generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String?
  image         String?
  emailVerified DateTime?
  role          String        @default("user")
  isActive      Boolean       @default(true)
  isVerified    Boolean       @default(false)
  skills        String[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  country       String?       @default("IN")
  accounts      Account[]
  applications  Application[]
  company       Company?
  jobs          Job[]
  resumes       Resume[]
  sessions      Session[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  website     String?
  location    String?
  industry    String?
  size        String?
  founded     Int?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs        Job[]
}

model Job {
  id           String        @id @default(uuid())
  title        String
  description  String
  requirements String[]
  salary       String?
  location     String?
  type         String?
  category     String?
  isActive     Boolean       @default(true)
  isFeatured   Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  companyId    String
  userId       String
  country      String?       @default("IN")
  applications Application[]
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Application {
  id          String   @id @default(uuid())
  status      String   @default("pending")
  coverLetter String?
  resume      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobId       String
  userId      String
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id         String   @id @default(uuid())
  title      String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  fileName   String
  fileSize   Int
  fileUrl    String
  mimeType   String
  parsedData Json?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
